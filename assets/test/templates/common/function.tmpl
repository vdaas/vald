{{define "function"}}
{{- $f := . }}

{{ $hasFields := false }}

func {{ .TestName }}(t *testing.T) {
    {{- if .TestParameters }}
    type args struct {
		{{- range .TestParameters }}
				{{ .Name }} {{ .Type }}
		{{- end}}
	}
    {{- end }}
	{{- with .Receiver }}
        {{- if .IsStruct }}
            {{- if .Fields}}
                type fields struct { {{ $hasFields = true }}
                    {{- range .Fields }}
                        {{ Field . }} {{ .Type }}
                    {{- end }}
                }
            {{- end }}
        {{- end }}
	{{- end }}
    type want struct {
        {{- range .TestResults }}
            {{ Want . }} {{ .Type }}
        {{- end }}
        {{- if .ReturnsError }}
            err error
        {{- end }}
    }
    type test struct {
		name string
        {{- if .TestParameters }}
            args args
        {{- end }}
        {{- if $hasFields }}
            fields fields
        {{- end }}
        want want
		checkFunc func(want,
                    {{- range .TestResults }} {{ .Type }}, {{- end }}
                    {{- if .ReturnsError }} error {{- end }} ) error
        beforeFunc func({{- if .TestParameters }} args {{- end}})
        afterFunc func({{- if .TestParameters }} args {{- end}})
    }
    defaultCheckFunc := func(w want,
        {{- range .TestResults }} {{ Got . }} {{ .Type }}, {{- end }}
        {{- if .ReturnsError }} err error {{- end }} ) error {

        {{- if .ReturnsError }}
            if !errors.Is(err, w.err) {
                return errors.Errorf("got error = %v, want %v", err, w.err)
            }
        {{- end }}
        {{- range .TestResults }} {{ $want := Want . }} {{ $got := Got . }}
            if !reflect.DeepEqual({{ $got }}, w.{{ $want }}) {
                return errors.Errorf("got = %v, want %v", {{ $got }}, w.{{ $want }})
            }
        {{- end }}
        return nil
    }
    tests := []test{
        // TODO test cases
        {
            name: "test_case_1",
            {{- if .TestParameters }}
            args: args {
                {{- template "fill" .TestParameters }} 
            },
            {{- end }}
            {{- if $hasFields }}
            fields: fields {
                {{- template "fill" .Receiver.Fields }} 
            },
            {{- end }}
            want: want{},
            checkFunc: defaultCheckFunc,
        },

        func() test {
            return test {
                name: "test_case_2",
                {{- if .TestParameters }}
                args: args {
                    {{- template "fill" .TestParameters }} 
                },
                {{- end }}
                {{- if $hasFields }}
                fields: fields {
                    {{- template "fill" .Receiver.Fields }} 
                },
                {{- end }}
                want: want{},
                checkFunc: defaultCheckFunc,
            }
        }(),
	}

	for {{- if (or .Subtests (not .IsNaked)) }} _, tt := {{- end }} range tests {
        {{- if .Subtests }}
            t.Run(tt.name, func(t *testing.T) {
                if tt.beforeFunc != nil {
                    tt.beforeFunc({{- if .TestParameters }} tt.args {{- end }})
                }
                if tt.afterFunc != nil {
                    defer tt.afterFunc({{- if .TestParameters }} tt.args {{- end }})
                }
                if tt.checkFunc == nil {
                    tt.checkFunc = defaultCheckFunc
                }

                {{- with .Receiver }}
                    {{- if .IsStruct }}
                        {{ Receiver . }} := {{- if .Type.IsStar }}&{{- end }}{{ .Type.Value }} {
                        {{- range .Fields }}
                            {{ .Name }}: tt.fields.{{ Field . }},
                        {{- end }}
                        }
                    {{- end }}
                {{- end }}

                {{- range .Parameters }}
                    {{- if .IsWriter }}
                        {{ Param . }} := &bytes.Buffer{}
                    {{- end }}
                {{- end }}

                {{ $len := len .Results }}
                {{- if or (ge $len 1) (.OnlyReturnsOneValue) (.OnlyReturnsError) }}
                    {{ template "results" $f }} := {{ template "call" $f }}
                    if err := tt.checkFunc(tt.want, {{ template "results" $f }} ); err != nil {
                        t.Errorf("error = %v", err)
                    }
                {{ else }}
                    {{ template "call" $f }}
                    if err := tt.checkFunc(tt.want); err != nil {
                        t.Errorf("error = %v", err)
                    }
                {{- end }}
            })
		{{- end }}
	}
}

{{- end }}
