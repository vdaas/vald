#
# Copyright (C) 2019-2020 Vdaas.org Vald team ( kpango, rinx, kmrmt )
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

defaults:
  # defaults.time_zone -- Time zone
  time_zone: UTC
  logging:
    # defaults.logging.logger -- logger name
    logger: glg
    # defaults.logging.level -- logging level
    level: debug
    # defaults.logging.format -- logging format
    format: raw
  image:
    # defaults.image.tag -- image tag
    tag: v0.0.25
  server_config:
    servers:
      rest:
        # defaults.server_config.servers.rest.enabled -- REST server enabled
        enabled: false
        # defaults.server_config.servers.rest.host -- REST server host
        host: 0.0.0.0
        # defaults.server_config.servers.rest.port -- REST server port
        port: 8080
        # defaults.server_config.servers.rest.servicePort -- REST server service port
        servicePort: 8080
        server:
          # defaults.server_config.servers.rest.server.mode -- REST server server mode
          mode: REST
          # defaults.server_config.servers.rest.server.probe_wait_time -- REST server probe wait time
          probe_wait_time: 3s
          http:
            # defaults.server_config.servers.rest.server.http.shutdown_duration -- REST server shutdown duration
            shutdown_duration: 5s
            # defaults.server_config.servers.rest.server.http.handler_timeout -- REST server handler timeout
            handler_timeout: 5s
            # defaults.server_config.servers.rest.server.http.idle_timeout -- REST server idle timeout
            idle_timeout: 2s
            # defaults.server_config.servers.rest.server.http.read_header_timeout -- REST server read header timeout
            read_header_timeout: 1s
            # defaults.server_config.servers.rest.server.http.read_timeout -- REST server read timeout
            read_timeout: 1s
            # defaults.server_config.servers.rest.server.http.write_timeout -- REST server write timeout
            write_timeout: 1s
      grpc:
        # defaults.server_config.servers.grpc.enabled -- gRPC server enabled
        enabled: true
        # defaults.server_config.servers.grpc.host -- gRPC server host
        host: 0.0.0.0
        # defaults.server_config.servers.grpc.port -- gRPC server port
        port: 8081
        # defaults.server_config.servers.grpc.servicePort -- gRPC server service port
        servicePort: 8081
        server:
          # defaults.server_config.servers.grpc.server.mode -- gRPC server server mode
          mode: GRPC
          # defaults.server_config.servers.grpc.server.probe_wait_time -- gRPC server probe wait time
          probe_wait_time: "3s"
          grpc:
            # defaults.server_config.servers.grpc.server.grpc.bidirectional_stream_concurrency -- gRPC server bidirectional stream concurrency
            bidirectional_stream_concurrency: 20
            # defaults.server_config.servers.grpc.server.grpc.max_receive_message_size -- gRPC server max receive message size
            max_receive_message_size: 0
            # defaults.server_config.servers.grpc.server.grpc.max_send_message_size -- gRPC server max send message size
            max_send_message_size: 0
            # defaults.server_config.servers.grpc.server.grpc.initial_window_size -- gRPC server initial window size
            initial_window_size: 0
            # defaults.server_config.servers.grpc.server.grpc.initial_conn_window_size -- gRPC server initial connection window size
            initial_conn_window_size: 0
            keepalive:
              # defaults.server_config.servers.grpc.server.grpc.keepalive.max_conn_idle -- gRPC server keep alive max connection idle
              max_conn_idle: ""
              # defaults.server_config.servers.grpc.server.grpc.keepalive.max_conn_age -- gRPC server keep alive max connection age
              max_conn_age: ""
              # defaults.server_config.servers.grpc.server.grpc.keepalive.max_conn_age_grace -- gRPC server keep alive max connection age grace
              max_conn_age_grace: ""
              # defaults.server_config.servers.grpc.server.grpc.keepalive.time -- gRPC server keep alive time
              time: ""
              # defaults.server_config.servers.grpc.server.grpc.keepalive.timeout -- gRPC server keep alive timeout
              timeout: ""
            # defaults.server_config.servers.grpc.server.grpc.write_buffer_size -- gRPC server write buffer size
            write_buffer_size: 0
            # defaults.server_config.servers.grpc.server.grpc.read_buffer_size -- gRPC server read buffer size
            read_buffer_size: 0
            # defaults.server_config.servers.grpc.server.grpc.connection_timeout -- gRPC server connection timeout
            connection_timeout: ""
            # defaults.server_config.servers.grpc.server.grpc.max_header_list_size -- gRPC server max header list size
            max_header_list_size: 0
            # defaults.server_config.servers.grpc.server.grpc.header_table_size -- gRPC server header table size
            header_table_size: 0
            # defaults.server_config.servers.grpc.server.grpc.interceptors -- gRPC server interceptors
            interceptors: []
          # defaults.server_config.servers.grpc.server.restart -- gRPC server restart
          restart: true
    healths:
      liveness:
        # defaults.server_config.healths.liveness.enabled -- liveness server enabled
        enabled: true
        # defaults.server_config.healths.liveness.host -- liveness server host
        host: 0.0.0.0
        # defaults.server_config.healths.liveness.port -- liveness server port
        port: 3000
        # defaults.server_config.healths.liveness.servicePort -- liveness server service port
        servicePort: 3000
        livenessProbe:
          httpGet:
            # defaults.server_config.healths.liveness.livenessProbe.httpGet.path -- liveness probe path
            path: /liveness
            # defaults.server_config.healths.liveness.livenessProbe.httpGet.port -- liveness probe port
            port: liveness
            # defaults.server_config.healths.liveness.livenessProbe.httpGet.scheme -- liveness probe scheme
            scheme: HTTP
          # defaults.server_config.healths.livensss.livenessProbe.initialDelaySeconds -- liveness probe initial delay seconds
          initialDelaySeconds: 5
          # defaults.server_config.healths.livensss.livenessProbe.timeoutSeconds -- liveness probe timeout seconds
          timeoutSeconds: 2
          # defaults.server_config.healths.livensss.livenessProbe.successThreshold -- liveness probe success threshold
          successThreshold: 1
          # defaults.server_config.healths.livensss.livenessProbe.failureThreshold -- liveness probe failure threshold
          failureThreshold: 2
          # defaults.server_config.healths.livensss.livenessProbe.periodSeconds -- liveness probe period seconds
          periodSeconds: 3
        server:
          # defaults.server_config.healths.liveness.server.mode -- liveness server mode
          mode: ""
          # defaults.server_config.healths.liveness.server.probe_wait_time -- liveness server probe wait time
          probe_wait_time: "3s"
          http:
            # defaults.server_config.healths.liveness.server.http.shutdown_duration -- liveness server shutdown duration
            shutdown_duration: "5s"
            # defaults.server_config.healths.liveness.server.http.handler_timeout -- liveness server handler timeout
            handler_timeout: ""
            # defaults.server_config.healths.liveness.server.http.idle_timeout -- liveness server idle timeout
            idle_timeout: ""
            # defaults.server_config.healths.liveness.server.http.read_header_timeout -- liveness server read header timeout
            read_header_timeout: ""
            # defaults.server_config.healths.liveness.server.http.read_timeout -- liveness server read timeout
            read_timeout: ""
            # defaults.server_config.healths.liveness.server.http.write_timeout -- liveness server write timeout
            write_timeout: ""
      readiness:
        # defaults.server_config.healths.readiness.enabled -- readiness server enabled
        enabled: true
        # defaults.server_config.healths.readiness.host -- readiness server host
        host: 0.0.0.0
        # defaults.server_config.healths.readiness.port -- readiness server port
        port: 3001
        # defaults.server_config.healths.readiness.servicePort -- readiness server service port
        servicePort: 3001
        readinessProbe:
          httpGet:
            # defaults.server_config.healths.readiness.readinessProbe.httpGet.path -- readiness probe path
            path: /readiness
            # defaults.server_config.healths.readiness.readinessProbe.httpGet.port -- readiness probe port
            port: readiness
            # defaults.server_config.healths.readiness.readinessProbe.httpGet.scheme -- readiness probe scheme
            scheme: HTTP
          # defaults.server_config.healths.readiness.readinessProbe.initialDelaySeconds -- readiness probe initial delay seconds
          initialDelaySeconds: 10
          # defaults.server_config.healths.readiness.readinessProbe.timeoutSeconds -- readiness probe timeout seconds
          timeoutSeconds: 2
          # defaults.server_config.healths.readiness.readinessProbe.successThreshold -- readiness probe success threshold
          successThreshold: 1
          # defaults.server_config.healths.readiness.readinessProbe.failureThreshold -- readiness probe failure threshold
          failureThreshold: 2
          # defaults.server_config.healths.readiness.readinessProbe.periodSeconds -- readiness probe period seconds
          periodSeconds: 3
        server:
          # defaults.server_config.healths.readiness.server.mode -- readiness server mode
          mode: ""
          # defaults.server_config.healths.readiness.server.probe_wait_time -- readiness server probe wait time
          probe_wait_time: "3s"
          http:
            # defaults.server_config.healths.readiness.server.http.shutdown_duration -- readiness server shutdown duration
            shutdown_duration: "5s"
            # defaults.server_config.healths.readiness.server.http.handler_timeout -- readiness server handler timeout
            handler_timeout: ""
            # defaults.server_config.healths.readiness.server.http.idle_timeout -- readiness server idle timeout
            idle_timeout: ""
            # defaults.server_config.healths.readiness.server.http.read_header_timeout -- readiness server read header timeout
            read_header_timeout: ""
            # defaults.server_config.healths.readiness.server.http.read_timeout -- readiness server read timeout
            read_timeout: ""
            # defaults.server_config.healths.readiness.server.http.write_timeout -- readiness server write timeout
            write_timeout: ""
    metrics:
      pprof:
        # defaults.server_config.metrics.pprof.enabled -- pprof server enabled
        enabled: false
        # defaults.server_config.metrics.pprof.host -- pprof server host
        host: 0.0.0.0
        # defaults.server_config.metrics.pprof.port -- pprof server port
        port: 6060
        # defaults.server_config.metrics.pprof.servicePort -- pprof server service port
        servicePort: 6060
        server:
          # defaults.server_config.metrics.pprof.server.mode -- pprof server mode
          mode: REST
          # defaults.server_config.metrics.pprof.server.probe_wait_time -- pprof server probe wait time
          probe_wait_time: 3s
          http:
            # defaults.server_config.metrics.pprof.server.http.shutdown_duration -- pprof server shutdown duration
            shutdown_duration: 5s
            # defaults.server_config.metrics.pprof.server.http.handler_timeout -- pprof server handler timeout
            handler_timeout: 5s
            # defaults.server_config.metrics.pprof.server.http.idle_timeout -- pprof server idle timeout
            idle_timeout: 2s
            # defaults.server_config.metrics.pprof.server.http.read_header_timeout -- pprof server read header timeout
            read_header_timeout: 1s
            # defaults.server_config.metrics.pprof.server.http.read_timeout -- pprof server read timeout
            read_timeout: 1s
            # defaults.server_config.metrics.pprof.server.http.write_timeout -- pprof server write timeout
            write_timeout: 1s
      prometheus:
        # defaults.server_config.metrics.prometheus.enabled -- prometheus server enabled
        enabled: false
        # defaults.server_config.metrics.prometheus.host -- prometheus server host
        host: 0.0.0.0
        # defaults.server_config.metrics.prometheus.port -- prometheus server port
        port: 6061
        # defaults.server_config.metrics.prometheus.servicePort -- prometheus server service port
        servicePort: 6061
        server:
          # defaults.server_config.metrics.prometheus.server.mode -- prometheus server mode
          mode: REST
          # defaults.server_config.metrics.prometheus.server.probe_wait_time -- prometheus server probe wait time
          probe_wait_time: 3s
          http:
            # defaults.server_config.metrics.prometheus.server.http.shutdown_duration -- prometheus server shutdown duration
            shutdown_duration: 5s
            # defaults.server_config.metrics.prometheus.server.http.handler_timeout -- prometheus server handler timeout
            handler_timeout: 5s
            # defaults.server_config.metrics.prometheus.server.http.idle_timeout -- prometheus server idle timeout
            idle_timeout: 2s
            # defaults.server_config.metrics.prometheus.server.http.read_header_timeout -- prometheus server read header timeout
            read_header_timeout: 1s
            # defaults.server_config.metrics.prometheus.server.http.read_timeout -- prometheus server read timeout
            read_timeout: 1s
            # defaults.server_config.metrics.prometheus.server.http.write_timeout -- prometheus server write timeout
            write_timeout: 1s
    # defaults.server_config.full_shutdown_duration -- server full shutdown duration
    full_shutdown_duration: 600s
    tls:
      # defaults.server_config.tls.enabled -- TLS enabled
      enabled: false
      # defaults.server_config.tls.cert -- TLS cert path
      cert: /path/to/cert
      # defaults.server_config.tls.key -- TLS key path
      key: /path/to/key
      # defaults.server_config.tls.ca -- TLS ca path
      ca: /path/to/ca
  grpc:
    client:
      # defaults.grpc.client.addrs -- gRPC client addresses
      addrs: []
      # defaults.grpc.client.connection_pool -- number of gRPC client connection pool
      connection_pool: 3
      # defaults.grpc.client.health_check_duration -- gRPC client health check duration
      health_check_duration: "1s"
      backoff:
        # defaults.grpc.client.backoff.initial_duration -- gRPC client backoff initial duration
        initial_duration: 5ms
        # defaults.grpc.client.backoff.backoff_time_limit -- gRPC client backoff time limit
        backoff_time_limit: 5s
        # defaults.grpc.client.backoff.maximum_duration -- gRPC client backoff maximum duration
        maximum_duration: 5s
        # defaults.grpc.client.backoff.jitter_limit -- gRPC client backoff jitter limit
        jitter_limit: 100ms
        # defaults.grpc.client.backoff.backoff_factor -- gRPC client backoff factor
        backoff_factor: 1.1
        # defaults.grpc.client.backoff.retry_count -- gRPC client backoff retry count
        retry_count: 100
        # defaults.grpc.client.backoff.enable_error_log -- gRPC client backoff log enabled
        enable_error_log: true
      call_option:
        # defaults.grpc.client.call_option.wait_for_ready -- gRPC client call option wait for ready
        wait_for_ready: true
        # defaults.grpc.client.call_option.max_retry_rpc_buffer_size -- gRPC client call option max retry rpc buffer size
        max_retry_rpc_buffer_size: 0
        # defaults.grpc.client.call_option.max_recv_msg_size -- gRPC client call option max receive message size
        max_recv_msg_size: 0
        # defaults.grpc.client.call_option.max_send_msg_size -- gRPC client call option max send message size
        max_send_msg_size: 0
      dial_option:
        # defaults.grpc.client.dial_option.write_buffer_size -- gRPC client dial option write buffer size
        write_buffer_size: 0
        # defaults.grpc.client.dial_option.read_buffer_size -- gRPC client dial option read buffer size
        read_buffer_size: 0
        # defaults.grpc.client.dial_option.initial_window_size -- gRPC client dial option initial window size
        initial_window_size: 0
        # defaults.grpc.client.dial_option.initial_connection_window_size -- gRPC client dial option initial connection window size
        initial_connection_window_size: 0
        # defaults.grpc.client.dial_option.max_msg_size -- gRPC client dial option max message size
        max_msg_size: 0
        # defaults.grpc.client.dial_option.max_backoff_delay -- gRPC client dial option max backoff delay
        max_backoff_delay: ""
        # defaults.grpc.client.dial_option.enable_backoff -- gRPC client dial option backoff enabled
        enable_backoff: false
        # defaults.grpc.client.dial_option.insecure -- gRPC client dial option insecure enabled
        insecure: true
        # defaults.grpc.client.dial_option.timeout -- gRPC client dial option timeout
        timeout: ""
        tcp:
          dns:
            # defaults.grpc.client.dial_option.tcp.dns.cache_enabled -- gRPC client TCP DNS cache enabled
            cache_enabled: true
            # defaults.grpc.client.dial_option.tcp.dns.refresh_duration -- gRPC client TCP DNS cache refresh duration
            refresh_duration: 30m
            # defaults.grpc.client.dial_option.tcp.dns.cache_expiration -- gRPC client TCP DNS cache expiration
            cache_expiration: 1h
          dialer:
            # defaults.grpc.client.dial_option.tcp.dialer.timeout -- gRPC client TCP dialer timeout
            timeout: ""
            # defaults.grpc.client.dial_option.tcp.dialer.keep_alive -- gRPC client TCP dialer keep alive
            keep_alive: ""
            # defaults.grpc.client.dial_option.tcp.dialer.dual_stack_enabled -- gRPC client TCP dialer dual stack enabled
            dual_stack_enabled: true
          tls:
            # defaults.grpc.client.dial_option.tcp.tls.enabled -- gRPC client TCP TLS enabled
            enabled: false
            # defaults.grpc.client.dial_option.tcp.tls.cert -- gRPC client TCP TLS cert path
            cert: /path/to/cert
            # defaults.grpc.client.dial_option.tcp.tls.key -- gRPC client TCP TLS key path
            key: /path/to/key
            # defaults.grpc.client.dial_option.tcp.tls.ca -- gRPC client TCP TLS ca path
            ca: /path/to/ca
        keep_alive:
          # defaults.grpc.client.dial_option.keep_alive.time -- gRPC client keep alive time
          time: ""
          # defaults.grpc.client.dial_option.keep_alive.timeout -- gRPC client keep alive timeout
          timeout: ""
          # defaults.grpc.client.dial_option.keep_alive.permit_without_stream -- gRPC client keep alive permit without stream
          permit_without_stream: false
      tls:
        # defaults.grpc.client.tls.enabled -- gRPC client TLS enabled
        enabled: false
        # defaults.grpc.client.tls.cert -- gRPC client TLS cert path
        cert: /path/to/cert
        # defaults.grpc.client.tls.key -- gRPC client TLS key path
        key: /path/to/key
        # defaults.grpc.client.tls.ca -- gRPC client TLS ca path
        ca: /path/to/ca
  observability:
    # defaults.observability.enabled -- observability enabled
    enabled: false
    collector:
      # defaults.observability.collector.duration -- observability collector collect duration
      duration: 5s
      metrics:
        # defaults.observability.collector.metrics.enable_version_info -- observability collector version info enabled
        enable_version_info: true
        # defaults.observability.collector.metrics.enable_memory -- observability collector memory metrics enabled
        enable_memory: true
        # defaults.observability.collector.metrics.enable_goroutine -- observability collector goroutine metrics enabled
        enable_goroutine: true
        # defaults.observability.collector.metrics.enable_cgo -- observability collector cgo metrics enabled
        enable_cgo: true
    trace:
      # defaults.observability.trace.enabled -- trace enabled
      enabled: false
      # defaults.observability.trace.sampling_rate -- trace sampling rate
      sampling_rate: 1.0
    prometheus:
      # defaults.observability.prometheus.enabled -- Prometheus exporter enabled
      enabled: false
    jaeger:
      # defaults.observability.jaeger.enabled -- Jaeger exporter enabled
      enabled: false
      # defaults.observability.jaeger.collector_endpoint -- Jaeger collector endpoint
      collector_endpoint: "" # http://jaeger-collector.default.svc.cluster.local:14268/api/traces
      # defaults.observability.jaeger.agent_endpoint -- Jaeger agent endpoint
      agent_endpoint: jaeger-agent.default.svc.cluster.local:6831
      # defaults.observability.jaeger.username -- Jaeger username
      username: ""
      # defaults.observability.jaeger.password -- Jaeger password
      password: ""
      # defaults.observability.jaeger.service_name -- Jaeger service name
      service_name: vald
      # defaults.observability.jaeger.buffer_max_count -- Jaeger buffer max count
      buffer_max_count: 10

gateway:
  # gateway.version -- version of gateway config
  version: v0.0.0
  # gateway.name -- name of vald-gateway
  name: vald-gateway
  # gateway.kind -- deployment kind: Deployment or DaemonSet
  kind: Deployment
  # gateway.serviceType -- service type: ClusterIP, LoadBalancer or NodePort
  serviceType: ClusterIP
  # gateway.externalTrafficPolicy -- external traffic policy (can be specified when service type is LoadBalancer or NodePort) : Cluster or Local
  externalTrafficPolicy: null
  # gateway.progressDeadlineSeconds -- progress deadline seconds
  progressDeadlineSeconds: 600
  # gateway.minReplicas -- minimum number of replicas
  minReplicas: 3
  # gateway.maxReplicas -- maximum number of replicas
  maxReplicas: 9
  # gateway.maxUnavailable -- maximum number of unavailable replicas
  maxUnavailable: 50%
  # gateway.revisionHistoryLimit -- number of old history to retain to allow rollback
  revisionHistoryLimit: 2
  # gateway.terminationGracePeriodSeconds -- duration in seconds pod needs to terminate gracefully
  terminationGracePeriodSeconds: 30
  # gateway.annotations -- deployment annotations
  annotations: null
  # gateway.podAnnotations -- pod annotations
  podAnnotations: null
  service:
    # gateway.service.annotations -- service annotations
    annotations: null
    # gateway.service.labels -- service labels
    labels: null
  hpa:
    # gateway.hpa.enabled -- HPA enabled
    enabled: true
    # gateway.hpa.targetCPUUtilizationPercentage -- HPA CPU utilization percentage
    targetCPUUtilizationPercentage: 80
  image:
    # gateway.image.repository -- image repository
    repository: vdaas/vald-gateway
    # gateway.image.tag -- image tag (overrides defaults.image.tag)
    tag: null
    # gateway.image.pullPolicy -- image pull policy
    pullPolicy: Always
  rollingUpdate:
    # gateway.rollingUpdate.maxSurge -- max surge of rolling update
    maxSurge: 25%
    # gateway.rollingUpdate.maxUnavailable -- max unavailable of rolling update
    maxUnavailable: 25%
  # gateway.initContainers -- init containers
  initContainers:
    - type: wait-for
      name: wait-for-manager-compressor
      target: compressor
      image: busybox
      sleepDuration: 2
    - type: wait-for
      name: wait-for-meta
      target: meta
      image: busybox
      sleepDuration: 2
    - type: wait-for
      name: wait-for-discoverer
      target: discoverer
      image: busybox
      sleepDuration: 2
    - type: wait-for
      name: wait-for-agent
      target: agent
      image: busybox
      sleepDuration: 2
  # gateway.env -- environment variables
  env:
    # - name: MY_NODE_NAME
    #   valueFrom:
    #     fieldRef:
    #       fieldPath: spec.nodeName
    - name: MY_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
  # gateway.volumeMounts -- volume mounts
  volumeMounts: null
  # gateway.volumes -- volumes
  volumes: null
  # gateway.nodeName -- node name
  nodeName: null
  # gateway.nodeSelector -- node selector
  nodeSelector: null
  # gateway.server_config -- server config (overrides defaults.server_config)
  server_config:
    prefix: gateway
    servers:
      rest:
        enabled: false
      grpc:
        enabled: false
    healths:
      liveness:
        enabled: false
      readiness:
        enabled: false
    metrics:
      pprof:
        enabled: false
      prometheus:
        enabled: false
    full_shutdown_duration: 600s
    tls:
      enabled: false
  # gateway.observability -- observability config (overrides defaults.observability)
  observability:
    jaeger:
      service_name: vald-gateway
  filter:
    # gateway.filter.egress -- egress filters
    egress:
      - ""
    # gateway.filter.ingress -- ingress filters
    ingress:
      - ""
  ingress:
    # gateway.ingress.annotations -- annotations for ingress
    annotations:
      nginx.ingress.kubernetes.io/grpc-backend: "true"
    # gateway.ingress.host -- ingress hostname
    host: vald.gateway.vdaas.org
    # gateway.ingress.servicePort -- service port to be exposed by ingress
    servicePort: grpc
  # gateway.resources -- compute resources
  resources:
    requests:
      cpu: 200m
      memory: 150Mi
    limits:
      cpu: 2000m
      memory: 700Mi
  gateway_config:
    # gateway.gateway_config.agent_namespace -- agent namespace
    agent_namespace: _MY_POD_NAMESPACE_
    # gateway.gateway_config.node_name -- node name
    node_name: "" # _MY_NODE_NAME_
    # gateway.gateway_config.index_replica -- number of index replica
    index_replica: 5
    discoverer:
      # gateway.gateway_config.discoverer.duration -- discoverer duration
      duration: 200ms
      # gateway.gateway_config.discoverer.discover_client -- gRPC client for discoverer (overrides defaults.grpc.client)
      discover_client: {}
      # gateway.gateway_config.discoverer.agent_client -- gRPC client for agents (overrides defaults.grpc.client)
      agent_client: {}
    meta:
      # gateway.gateway_config.meta.client -- gRPC client for meta (overrides defaults.grpc.client)
      client: {}
      # gateway.gateway_config.meta.enable_cache -- meta cache enabled
      enable_cache: true
      # gateway.gateway_config.meta.cache_expiration -- meta cache expire duration
      cache_expiration: "30m"
      # gateway.gateway_config.meta.expired_cache_check_duration -- meta cache expired check duration
      expired_cache_check_duration: "3m"
    backup:
      # gateway.gateway_config.backup.client -- gRPC client for backup (overrides defaults.grpc.client)
      client: {}

agent:
  version: v0.0.0
  name: vald-agent-ngt
  kind: StatefulSet
  # kind: DaemonSet
  # kind: Deployment
  serviceType: ClusterIP
  # externalTrafficPolicy: Cluster
  progressDeadlineSeconds: 600
  minReplicas: 20
  maxReplicas: 300
  maxUnavailable: 1
  revisionHistoryLimit: 2
  terminationGracePeriodSeconds: 30
  podManagementPolicy: OrderedReady
  podPriority:
    enabled: true
    value: 1000000000
  hpa:
    enabled: false
    targetCPUUtilizationPercentage: 80
  image:
    repository: vdaas/vald-agent-ngt
    # tag: nightly
    pullPolicy: Always
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
    partition: 0
  server_config:
    prefix: agent
    servers:
      rest:
        enabled: false
      grpc:
        enabled: false
    healths:
      liveness:
        enabled: false
      readiness:
        enabled: false
    metrics:
      pprof:
        enabled: false
      prometheus:
        enabled: false
    full_shutdown_duration: 600s
    tls:
      enabled: false
  observability:
    jaeger:
      service_name: vald-agent-ngt
  resources:
    requests:
      cpu: 300m
      memory: 4Gi # = cluster memory * 0.4 / number of agent pods
  ngt:
    # index_path: /path/to/index
    auto_index_limit: 24h
    auto_index_check_duration: 30m
    auto_index_length: 100
    dimension: 4096
    bulk_insert_chunk_size: 10
    distance_type: l2
    object_type: float
    creation_edge_size: 20
    search_edge_size: 10
    enable_in_memory_mode: true

discoverer:
  version: v0.0.0
  name: vald-discoverer
  kind: Deployment
  # kind: DaemonSet
  serviceType: ClusterIP
  # externalTrafficPolicy: Cluster
  progressDeadlineSeconds: 600
  minReplicas: 1
  maxReplicas: 2
  maxUnavailable: 50%
  revisionHistoryLimit: 2
  terminationGracePeriodSeconds: 30
  image:
    repository: vdaas/vald-discoverer-k8s
    # tag: nightly
    pullPolicy: Always
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
  env:
    - name: MY_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
  server_config:
    prefix: discoverer
    servers:
      rest:
        enabled: false
      grpc:
        enabled: false
    healths:
      liveness:
        enabled: false
      readiness:
        enabled: false
    metrics:
      pprof:
        enabled: false
      prometheus:
        enabled: false
    full_shutdown_duration: 600s
    tls:
      enabled: false
  observability:
    jaeger:
      service_name: vald-discoverer
  resources:
    requests:
      cpu: 200m
      memory: 65Mi
    limits:
      cpu: 600m
      memory: 200Mi
  discoverer:
    name: ""
    namespace: _MY_POD_NAMESPACE_
    cache_sync_duration: 3s
  clusterRole:
    enabled: true
    name: discoverer
  clusterRoleBinding:
    enabled: true
    name: discoverer
  serviceAccount:
    enabled: true
    name: vald

compressor:
  version: v0.0.0
  name: vald-manager-compressor
  kind: Deployment
  # kind: DaemonSet
  serviceType: ClusterIP
  # externalTrafficPolicy: Cluster
  progressDeadlineSeconds: 600
  minReplicas: 3
  maxReplicas: 15
  maxUnavailable: 50%
  revisionHistoryLimit: 2
  terminationGracePeriodSeconds: 30
  hpa:
    enabled: true
    targetCPUUtilizationPercentage: 80
  image:
    repository: vdaas/vald-manager-compressor
    # tag: nightly
    pullPolicy: Always
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
  initContainers:
    - type: wait-for
      name: wait-for-manager-backup
      target: manager-backup
      image: busybox
      sleepDuration: 2
  server_config:
    prefix: manager-compressor
    servers:
      rest:
        enabled: false
      grpc:
        enabled: false
    healths:
      liveness:
        enabled: false
      readiness:
        enabled: false
    metrics:
      pprof:
        enabled: false
      prometheus:
        enabled: false
    full_shutdown_duration: 600s
    tls:
      enabled: false
  observability:
    jaeger:
      service_name: vald-manager-compressor
  resources:
    requests:
      cpu: 300m
      memory: 50Mi
    limits:
      cpu: 800m
      memory: 500Mi
  backup:
    client: {}
  compress:
    compress_algorithm: zstd
    compression_level: 10
    concurrent_limit: 10
    buffer: 100

backupManager:
  version: v0.0.0
  name: vald-manager-backup
  kind: Deployment
  # kind: DaemonSet
  serviceType: ClusterIP
  # externalTrafficPolicy: Cluster
  progressDeadlineSeconds: 600
  minReplicas: 3
  maxReplicas: 15
  maxUnavailable: 50%
  revisionHistoryLimit: 2
  terminationGracePeriodSeconds: 30
  hpa:
    enabled: true
    targetCPUUtilizationPercentage: 80
  image:
    repository: vdaas/vald-manager-backup-mysql
    # repository: vdaas/vald-manager-backup-cassandra
    # tag: nightly
    pullPolicy: Always
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
  initContainers:
    - type: wait-for-mysql
      name: wait-for-mysql
      image: mysql:latest
      mysql:
        hosts:
          - mysql.default.svc.cluster.local
        options:
          - "-uroot"
          - "-p${MYSQL_PASSWORD}"
      sleepDuration: 2
      env:
      - name: MYSQL_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mysql-secret
            key: password
    # - type: wait-for-cassandra
    #   name: wait-for-cassandra
    #   image: cassandra:latest
    #   cassandra:
    #     hosts:
    #       - cassandra-0.cassandra.default.svc.cluster.local
    #       - cassandra-1.cassandra.default.svc.cluster.local
    #       - cassandra-2.cassandra.default.svc.cluster.local
    #     options:
    #       - "-uroot"
    #       - "-p${CASSANDRA_PASSWORD}"
    #   sleepDuration: 2
    #   env:
    #   - name: CASSANDRA_PASSWORD
    #     valueFrom:
    #       secretKeyRef:
    #         name: cassandra-secret
    #         key: password
    # - type: wait-for-cassandra
    #   name: wait-for-scylla
    #   image: cassandra:latest
    #   cassandra:
    #     hosts:
    #       - scylla-0.scylla.default.svc.cluster.local
    #       - scylla-1.scylla.default.svc.cluster.local
    #       - scylla-2.scylla.default.svc.cluster.local
    #   sleepDuration: 2
  env:
    - name: MYSQL_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mysql-secret
          key: password
    # - name: CASSANDRA_PASSWORD
    #   valueFrom:
    #     secretKeyRef:
    #       name: cassandra-secret
    #       key: password
  server_config:
    prefix: backup-manager
    servers:
      rest:
        enabled: false
      grpc:
        enabled: false
    healths:
      liveness:
        enabled: false
      readiness:
        enabled: false
    metrics:
      pprof:
        enabled: false
      prometheus:
        enabled: false
    full_shutdown_duration: 600s
    tls:
      enabled: false
  observability:
    jaeger:
      service_name: vald-manager-backup
  resources:
    requests:
      cpu: 100m
      memory: 50Mi
    limits:
      cpu: 500m
      memory: 150Mi
  mysql:
    enabled: true
    config:
      db: mysql
      host: mysql.default.svc.cluster.local
      port: 3306
      user: root
      pass: _MYSQL_PASSWORD_
      name: vald
      conn_max_life_time: 30s
      max_open_conns: 100
      max_idle_conns: 100
      tls:
        enabled: false
        cert: /path/to/cert
        key: /path/to/key
        ca: /path/to/ca
      tcp:
        dns:
          cache_enabled: true
          refresh_duration: 1h
          cache_expiration: 24h
        dialer:
          timeout: 5s
          keep_alive: 5m
          dual_stack_enabled: false
        tls:
          enabled: false
          cert: /path/to/cert
          key: /path/to/key
          ca: /path/to/ca
  cassandra:
    enabled: false
    config:
      hosts:
        - cassandra-0.cassandra.default.svc.cluster.local
        - cassandra-1.cassandra.default.svc.cluster.local
        - cassandra-2.cassandra.default.svc.cluster.local
        # - scylla-0.scylla.default.svc.cluster.local
        # - scylla-1.scylla.default.svc.cluster.local
        # - scylla-2.scylla.default.svc.cluster.local
      cql_version: 3.0.0
      proto_version: 0
      timeout: 600ms
      connect_timeout: 600ms
      port: 9042
      keyspace: vald
      num_conns: 2
      consistency:  quorum
      username: root
      password: _CASSANDRA_PASSWORD_
      retry_policy:
        num_retries: 3
        min_duration: 1s
        max_duration: 30s
      reconnection_policy:
        max_retries: 3
        initial_interval: 1m
      socket_keepalive: 0s
      max_prepared_stmts: 1000
      max_routing_key_info: 1000
      page_size: 5000
      tls:
        enabled: false
        cert: /path/to/cert
        key: /path/to/key
        ca: /path/to/ca
      tcp:
        dns:
          cache_enabled: true
          refresh_duration: 5m
          cache_expiration: 24h
        dialer:
          timeout: 30s
          keep_alive: 10m
          dual_stack_enabled: false
      enable_host_verification: false
      default_timestamp: true
      reconnect_interval: 1m
      max_wait_schema_agreement: 1m
      ignore_peer_addr: false
      disable_initial_host_lookup: false
      disable_node_status_events: false
      disable_topology_events: false
      disable_skip_metadata: false
      default_idempotence: false
      write_coalesce_wait_time: 200ms
      meta_table: meta_vector
      pool_config:
        data_center: ""
        dc_aware_routing: false
        non_local_replicas_fallback: false
        shuffle_replicas: false

indexManager:
  version: v0.0.0
  name: vald-manager-index
  kind: Deployment
  # kind: DaemonSet
  serviceType: ClusterIP
  # externalTrafficPolicy: Cluster
  progressDeadlineSeconds: 600
  replicas: 1
  maxUnavailable: 50%
  revisionHistoryLimit: 2
  terminationGracePeriodSeconds: 30
  image:
    repository: vdaas/vald-manager-index
    # tag: nightly
    pullPolicy: Always
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
  initContainers:
    - type: wait-for
      name: wait-for-agent
      target: agent
      image: busybox
      sleepDuration: 2
    - type: wait-for
      name: wait-for-discoverer
      target: discoverer
      image: busybox
      sleepDuration: 2
  env:
    # - name: MY_NODE_NAME
    #   valueFrom:
    #     fieldRef:
    #       fieldPath: spec.nodeName
    - name: MY_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
  server_config:
    prefix: index-manager
    servers:
      rest:
        enabled: false
      grpc:
        enabled: false
    healths:
      liveness:
        enabled: false
      readiness:
        enabled: false
    metrics:
      pprof:
        enabled: false
      prometheus:
        enabled: false
    full_shutdown_duration: 600s
    tls:
      enabled: false
  observability:
    jaeger:
      service_name: vald-manager-index
  resources:
    requests:
      cpu: 200m
      memory: 80Mi
    limits:
      cpu: 1
      memory: 500Mi
  indexer:
    agent_namespace: _MY_POD_NAMESPACE_
    node_name: "" # _MY_NODE_NAME_
    concurrency: 1
    auto_index_duration_limit: 30m
    auto_index_check_duration: 1m
    auto_index_length: 100
    discoverer:
      duration: 500ms
      discover_client: {}
      agent_client:
        dial_option:
          tcp:
            dialer:
              keep_alive: 15m

meta:
  version: v0.0.0
  name: vald-meta
  kind: Deployment
  # kind: DaemonSet
  serviceType: ClusterIP
  # externalTrafficPolicy: Cluster
  progressDeadlineSeconds: 600
  minReplicas: 2
  maxReplicas: 10
  maxUnavailable: 50%
  revisionHistoryLimit: 2
  terminationGracePeriodSeconds: 30
  hpa:
    enabled: true
    targetCPUUtilizationPercentage: 80
  image:
    repository: vdaas/vald-meta-redis
    # repository: vdaas/vald-meta-cassandra
    # tag: nightly
    pullPolicy: Always
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
  initContainers:
    - type: wait-for-redis
      name: wait-for-redis
      image: redis:latest
      redis:
        hosts:
          - redis.default.svc.cluster.local
        options:
          - "-a ${REDIS_PASSWORD}"
      sleepDuration: 2
      env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
    # - type: wait-for-cassandra
    #   name: wait-for-cassandra
    #   image: cassandra:latest
    #   cassandra:
    #     hosts:
    #       - cassandra-0.cassandra.default.svc.cluster.local
    #       - cassandra-1.cassandra.default.svc.cluster.local
    #       - cassandra-2.cassandra.default.svc.cluster.local
    #     options:
    #       - "-uroot"
    #       - "-p${CASSANDRA_PASSWORD}"
    #   sleepDuration: 2
    #   env:
    #   - name: CASSANDRA_PASSWORD
    #     valueFrom:
    #       secretKeyRef:
    #         name: cassandra-secret
    #         key: password
    # - type: wait-for-cassandra
    #   name: wait-for-scylla
    #   image: cassandra:latest
    #   cassandra:
    #     hosts:
    #       - scylla-0.scylla.default.svc.cluster.local
    #       - scylla-1.scylla.default.svc.cluster.local
    #       - scylla-2.scylla.default.svc.cluster.local
    #   sleepDuration: 2
  env:
    - name: REDIS_PASSWORD
      valueFrom:
        secretKeyRef:
          name: redis-secret
          key: password
    # - name: CASSANDRA_PASSWORD
    #   valueFrom:
    #     secretKeyRef:
    #       name: cassandra-secret
    #       key: password
  server_config:
    prefix: meta
    servers:
      rest:
        enabled: false
      grpc:
        enabled: false
    healths:
      liveness:
        enabled: false
      readiness:
        enabled: false
    metrics:
      pprof:
        enabled: false
      prometheus:
        enabled: false
    full_shutdown_duration: 600s
    tls:
      enabled: false
  observability:
    jaeger:
      service_name: vald-meta
  resources:
    requests:
      cpu: 100m
      memory: 40Mi
    limits:
      cpu: 300m
      memory: 100Mi
  redis:
    enabled: true
    config:
      addrs:
        - redis.default.svc.cluster.local:6379
      db: 0
      dial_timeout: 5s
      idle_check_frequency: 1m
      idle_timeout: 5m
      key_pref: ""
      max_conn_age: 0s
      max_redirects: 3
      max_retries: 0
      max_retry_backoff: 512ms
      min_idle_conns: 0
      min_retry_backoff: 8ms
      password: _REDIS_PASSWORD_
      pool_size: 10
      pool_timeout: 4s
      read_only: false
      read_timeout: 3s
      write_timeout: 3s
      route_by_latency: false
      route_randomly: true
      tls:
        enabled: false
      tcp:
        dns:
          cache_enabled: true
          refresh_duration: 1h
          cache_expiration: 24h
        dialer:
          timeout: 5s
          keep_alive: 5m
          dual_stack_enabled: false
        tls:
          enabled: false
      kv_prefix: ""
      vk_prefix: ""
      prefix_delimiter: ""
  cassandra:
    enabled: false
    config:
      hosts:
        - cassandra-0.cassandra.default.svc.cluster.local
        - cassandra-1.cassandra.default.svc.cluster.local
        - cassandra-2.cassandra.default.svc.cluster.local
        # - scylla-0.scylla.default.svc.cluster.local
        # - scylla-1.scylla.default.svc.cluster.local
        # - scylla-2.scylla.default.svc.cluster.local
      cql_version: 3.0.0
      proto_version: 0
      timeout: 600ms
      connect_timeout: 600ms
      port: 9042
      keyspace: vald
      num_conns: 2
      consistency:  quorum
      username: root
      password: _CASSANDRA_PASSWORD_
      retry_policy:
        num_retries: 3
        min_duration: 1s
        max_duration: 30s
      reconnection_policy:
        max_retries: 3
        initial_interval: 1m
      socket_keepalive: 0s
      max_prepared_stmts: 1000
      max_routing_key_info: 1000
      page_size: 5000
      tls:
        enabled: false
        cert: /path/to/cert
        key: /path/to/key
        ca: /path/to/ca
      tcp:
        dns:
          cache_enabled: true
          refresh_duration: 5m
          cache_expiration: 24h
        dialer:
          timeout: 30s
          keep_alive: 10m
          dual_stack_enabled: false
      enable_host_verification: false
      default_timestamp: true
      reconnect_interval: 1m
      max_wait_schema_agreement: 1m
      ignore_peer_addr: false
      disable_initial_host_lookup: false
      disable_node_status_events: false
      disable_topology_events: false
      disable_skip_metadata: false
      default_idempotence: false
      write_coalesce_wait_time: 200ms
      kv_table: kv
      vk_table: vk
      pool_config:
        data_center: ""
        dc_aware_routing: false
        non_local_replicas_fallback: false
        shuffle_replicas: false

initializer:
  mysql:
    enabled: false
    name: mysql-init
    image:
      repository: mysql
      tag: latest
      pullPolicy: Always
    restartPolicy: Never
    env:
      - name: MYSQL_HOST
        value: mysql.default.svc.cluster.local
      - name: MYSQL_USER
        value: root
      - name: MYSQL_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mysql-secret
            key: password
    configmap:
      enabled: false
      name: mysql-config
      filename: ddl.sql
      schema: vald
    secret:
      enabled: false
      name: mysql-secret
      data:
        password: cGFzc3dvcmQ=
  redis:
    enabled: false
    name: redis-init
    image:
      repository: redis
      tag: latest
      pullPolicy: Always
    restartPolicy: Never
    env:
      - name: REDIS_HOST
        value: redis.default.svc.cluster.local
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: redis-secret
            key: password
    secret:
      enabled: false
      name: redis-secret
      data:
        password: cGFzc3dvcmQ=
  cassandra:
    enabled: false
    name: cassandra-init
    image:
      repository: cassandra
      tag: latest
      pullPolicy: Always
    restartPolicy: Never
    env:
      - name: CASSANDRA_HOST
        value: cassandra.default.svc.cluster.local
      - name: CASSANDRA_USER
        value: root
      - name: CASSANDRA_PASSWORD
        valueFrom:
          secretKeyRef:
            name: cassandra-secret
            key: password
    configmap:
      enabled: false
      name: cassandra-initdb
      filename: init.cql
      keyspace: vald
      replication_class: SimpleStrategy
      replication_factor: 3
      meta:
        enabled: true
        name:
          kv: kv
          vk: vk
      backup:
        enabled: true
        name: meta_vector
    secret:
      enabled: false
      name: cassandra-secret
      data:
        password: cGFzc3dvcmQ=
