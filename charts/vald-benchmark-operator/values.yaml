#
# Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# @schema {"name": "name", "type": "string"}
# name -- name of the deployment
name: vald-benchmark-operator
# @schema {"name": "replicas", "type": "integer"}
# replicas -- the number of replica for deployment
replicas: 1
# @schema {"name": "version", "type": "string"}
# version -- version of benchmark-operator config
version: v0.0.0
# @schema {"name": "time_zone", "type": "string"}
# time_zone -- time_zone
time_zone: ""
# @schema {"name": "image", "type": "object"}
image:
  # @schema {"name": "image.repository", "type": "string"}
  # image.repository -- image repository
  repository: vdaas/vald-benchmark-operator
  # @schema {"name": "image.tag", "type": "string"}
  # image.tag -- image tag
  tag: v1.7.12
  # @schema {"name": "image.pullPolicy", "type": "string", "enum": ["Always", "Never", "IfNotPresent"]}
  # image.pullPolicy -- image pull policy
  pullPolicy: Always
# @schema {"name": "job", "type": "object"}
job:
  # @schema {"name": "job.image", "type": "object"}
  image:
    # @schema {"name": "job.image.repository", "type": "string"}
    # image.repository -- job image repository
    repository: vdaas/vald-benchmark-job
    # @schema {"name": "job.image.tag", "type": "string"}
    # image.tag -- image tag for job docker image
    tag: v1.7.12
    # @schema {"name": "job.image.pullPolicy", "type": "string", "enum": ["Always", "Never", "IfNotPresent"]}
    # image.pullPolicy -- image pull policy
    pullPolicy: Always
  # @schema {"name": "job.client_config", "type": "object"}
  # client_config -- gRPC client config for request to the Vald cluster
  client_config:
    # @schema {"name": "job.client_config.addrs", "type": "array", "items": {"type": "string"}}
    # job.client_config.addrs -- gRPC client addresses
    addrs: []
    # @schema {"name": "job.client_config.health_check_duration", "type": "string"}
    # job.client_config.health_check_duration -- gRPC client health check duration
    health_check_duration: "1s"
    # @schema {"name": "job.client_config.connection_pool", "type": "object"}
    connection_pool:
      # @schema {"name": "job.client_config.connection_pool.enable_dns_resolver", "type": "boolean"}
      # job.client_config.connection_pool.enable_dns_resolver -- enables gRPC client connection pool dns resolver, when enabled vald uses ip handshake exclude dns discovery which improves network performance
      enable_dns_resolver: true
      # @schema {"name": "job.client_config.connection_pool.enable_rebalance", "type": "boolean"}
      # job.client_config.connection_pool.enable_rebalance -- enables gRPC client connection pool rebalance
      enable_rebalance: true
      # @schema {"name": "job.client_config.connection_pool.rebalance_duration", "type": "string"}
      # job.client_config.connection_pool.rebalance_duration -- gRPC client connection pool rebalance duration
      rebalance_duration: 30m
      # @schema {"name": "job.client_config.connection_pool.size", "type": "integer"}
      # job.client_config.connection_pool.size -- gRPC client connection pool size
      size: 3
      # @schema {"name": "job.client_config.connection_pool.old_conn_close_duration", "type": "string"}
      # job.client_config.connection_pool.old_conn_close_duration -- makes delay before gRPC client connection closing during connection pool rebalance
      old_conn_close_duration: "2m"
    # @schema {"name": "job.client_config.backoff", "type": "object", "anchor": "backoff"}
    backoff:
      # @schema {"name": "job.client_config.backoff.initial_duration", "type": "string"}
      # job.client_config.backoff.initial_duration -- gRPC client backoff initial duration
      initial_duration: 5ms
      # @schema {"name": "job.client_config.backoff.backoff_time_limit", "type": "string"}
      # job.client_config.backoff.backoff_time_limit -- gRPC client backoff time limit
      backoff_time_limit: 5s
      # @schema {"name": "job.client_config.backoff.maximum_duration", "type": "string"}
      # job.client_config.backoff.maximum_duration -- gRPC client backoff maximum duration
      maximum_duration: 5s
      # @schema {"name": "job.client_config.backoff.jitter_limit", "type": "string"}
      # job.client_config.backoff.jitter_limit -- gRPC client backoff jitter limit
      jitter_limit: 100ms
      # @schema {"name": "job.client_config.backoff.backoff_factor", "type": "number"}
      # job.client_config.backoff.backoff_factor -- gRPC client backoff factor
      backoff_factor: 1.1
      # @schema {"name": "job.client_config.backoff.retry_count", "type": "integer"}
      # job.client_config.backoff.retry_count -- gRPC client backoff retry count
      retry_count: 100
      # @schema {"name": "job.client_config.backoff.enable_error_log", "type": "boolean"}
      # job.client_config.backoff.enable_error_log -- gRPC client backoff log enabled
      enable_error_log: true
    # @schema {"name": "job.client_config.circuit_breaker", "type": "object"}
    circuit_breaker:
      # @schema {"name": "job.client_config.circuit_breaker.closed_error_rate", "type": "number"}
      # job.client_config.circuit_breaker.closed_error_rate -- gRPC client circuitbreaker closed error rate
      closed_error_rate: 0.7
      # @schema {"name": "job.client_config.circuit_breaker.half_open_error_rate", "type": "number"}
      # job.client_config.circuit_breaker.half_open_error_rate -- gRPC client circuitbreaker half-open error rate
      half_open_error_rate: 0.5
      # @schema {"name": "job.client_config.circuit_breaker.min_samples", "type": "integer"}
      # job.client_config.circuit_breaker.min_samples -- gRPC client circuitbreaker minimum sampling count
      min_samples: 1000
      # @schema {"name": "job.client_config.circuit_breaker.open_timeout", "type": "string"}
      # job.client_config.circuit_breaker.open_timeout -- gRPC client circuitbreaker open timeout
      open_timeout: "1s"
      # @schema {"name": "job.client_config.circuit_breaker.closed_refresh_timeout", "type": "string"}
      # job.client_config.circuit_breaker.closed_refresh_timeout -- gRPC client circuitbreaker closed refresh timeout
      closed_refresh_timeout: "10s"
    # @schema {"name": "job.client_config.call_option", "type": "object"}
    call_option:
      # @schema {"name": "job.client_config.wait_for_ready", "type": "boolean"}
      # job.client_config.call_option.wait_for_ready -- gRPC client call option wait for ready
      wait_for_ready: true
      # @schema {"name": "job.client_config.max_retry_rpc_buffer_size", "type": "integer"}
      # job.client_config.call_option.max_retry_rpc_buffer_size -- gRPC client call option max retry rpc buffer size
      max_retry_rpc_buffer_size: 0
      # @schema {"name": "job.client_config.max_recv_msg_size", "type": "integer"}
      # job.client_config.call_option.max_recv_msg_size -- gRPC client call option max receive message size
      max_recv_msg_size: 0
      # @schema {"name": "job.client_config.max_send_msg_size", "type": "integer"}
      # job.client_config.call_option.max_send_msg_size -- gRPC client call option max send message size
      max_send_msg_size: 0
    # @schema {"name": "job.client_config.dial_option", "type": "object"}
    dial_option:
      # @schema {"name": "job.client_config.dial_option.write_buffer_size", "type": "integer"}
      # job.client_config.dial_option.write_buffer_size -- gRPC client dial option write buffer size
      write_buffer_size: 0
      # @schema {"name": "job.client_config.dial_option.read_buffer_size", "type": "integer"}
      # job.client_config.dial_option.read_buffer_size -- gRPC client dial option read buffer size
      read_buffer_size: 0
      # @schema {"name": "job.client_config.dial_option.initial_window_size", "type": "integer"}
      # job.client_config.dial_option.initial_window_size -- gRPC client dial option initial window size
      initial_window_size: 0
      # @schema {"name": "job.client_config.dial_option.initial_connection_window_size", "type": "integer"}
      # job.client_config.dial_option.initial_connection_window_size -- gRPC client dial option initial connection window size
      initial_connection_window_size: 0
      # @schema {"name": "job.client_config.dial_option.max_msg_size", "type": "integer"}
      # job.client_config.dial_option.max_msg_size -- gRPC client dial option max message size
      max_msg_size: 0
      # @schema {"name": "job.client_config.dial_option.backoff_max_delay", "type": "string"}
      # job.client_config.dial_option.backoff_max_delay -- gRPC client dial option max backoff delay
      backoff_max_delay: "120s"
      # @schema {"name": "job.client_config.dial_option.backoff_base_delay", "type": "string"}
      # job.client_config.dial_option.backoff_base_delay -- gRPC client dial option base backoff delay
      backoff_base_delay: "1s"
      # @schema {"name": "job.client_config.dial_option.backoff_multiplier", "type": "number"}
      # job.client_config.dial_option.backoff_multiplier -- gRPC client dial option base backoff delay
      backoff_multiplier: 1.6
      # @schema {"name": "job.client_config.dial_option.backoff_jitter", "type": "number"}
      # job.client_config.dial_option.backoff_jitter -- gRPC client dial option base backoff delay
      backoff_jitter: 0.2
      # @schema {"name": "job.client_config.dial_option.min_connection_timeout", "type": "string"}
      # job.client_config.dial_option.min_connection_timeout -- gRPC client dial option minimum connection timeout
      min_connection_timeout: "20s"
      # @schema {"name": "job.client_config.dial_option.enable_backoff", "type": "boolean"}
      # job.client_config.dial_option.enable_backoff -- gRPC client dial option backoff enabled
      enable_backoff: false
      # @schema {"name": "job.client_config.dial_option.insecure", "type": "boolean"}
      # job.client_config.dial_option.insecure -- gRPC client dial option insecure enabled
      insecure: true
      # @schema {"name": "job.client_config.dial_option.timeout", "type": "string"}
      # job.client_config.dial_option.timeout -- gRPC client dial option timeout
      timeout: ""
      # @schema {"name": "job.client_config.dial_option.interceptors", "type": "array", "items": {"type": "string", "enum": ["TraceInterceptor"]}}
      # job.client_config.dial_option.interceptors -- gRPC client interceptors
      interceptors: []
      # @schema {"name": "job.client_config.dial_option.net", "type": "object", "anchor": "net"}
      net:
        # @schema {"name": "job.client_config.dial_option.net.dns", "type": "object"}
        dns:
          # @schema {"name": "job.client_config.dial_option.net.dns.cache_enabled", "type": "boolean"}
          # job.client_config.dial_option.net.dns.cache_enabled -- gRPC client TCP DNS cache enabled
          cache_enabled: true
          # @schema {"name": "job.client_config.dial_option.net.dns.refresh_duration", "type": "string"}
          # job.client_config.dial_option.net.dns.refresh_duration -- gRPC client TCP DNS cache refresh duration
          refresh_duration: 30m
          # @schema {"name": "job.client_config.dial_option.net.dns.cache_expiration", "type": "string"}
          # job.client_config.dial_option.net.dns.cache_expiration -- gRPC client TCP DNS cache expiration
          cache_expiration: 1h
        # @schema {"name": "job.client_config.dial_option.net.dialer", "type": "object"}
        dialer:
          # @schema {"name": "job.client_config.dial_option.net.dialer.timeout", "type": "string"}
          # job.client_config.dial_option.net.dialer.timeout -- gRPC client TCP dialer timeout
          timeout: ""
          # @schema {"name": "job.client_config.dial_option.net.dialer.keepalive", "type": "string"}
          # job.client_config.dial_option.net.dialer.keepalive -- gRPC client TCP dialer keep alive
          keepalive: ""
          # @schema {"name": "job.client_config.dial_option.net.dialer.dual_stack_enabled", "type": "boolean"}
          # job.client_config.dial_option.net.dialer.dual_stack_enabled -- gRPC client TCP dialer dual stack enabled
          dual_stack_enabled: true
        # @schema {"name": "job.client_config.dial_option.net.tls", "type": "object"}
        tls:
          # @schema {"name": "job.client_config.dial_option.net.tls.enabled", "type": "boolean"}
          # job.client_config.tls.enabled -- TLS enabled
          enabled: false
          # @schema {"name": "job.client_config.dial_option.net.tls.cert", "type": "string"}
          # job.client_config.tls.cert -- TLS cert path
          cert: /path/to/cert
          # @schema {"name": "job.client_config.dial_option.net.tls.key", "type": "string"}
          # job.client_config.tls.key -- TLS key path
          key: /path/to/key
          # @schema {"name": "job.client_config.dial_option.net.tls.ca", "type": "string"}
          # job.client_config.tls.ca -- TLS ca path
          ca: /path/to/ca
          # @schema {"name": "job.client_config.dial_option.net.tls.insecure_skip_verify", "type": "boolean"}
          # job.client_config.tls.insecure_skip_verify -- enable/disable skip SSL certificate verification
          insecure_skip_verify: false
        # @schema {"name": "job.client_config.dial_option.net.socket_option", "type": "object"}
        socket_option:
          # @schema {"name": "job.client_config.dial_option.net.socket_option.reuse_port", "type": "boolean"}
          # job.client_config.dial_option.net.socket_option.reuse_port -- server listen socket option for reuse_port functionality
          reuse_port: true
          # @schema {"name": "job.client_config.dial_option.net.socket_option.reuse_addr", "type": "boolean"}
          # job.client_config.dial_option.net.socket_option.reuse_addr -- server listen socket option for reuse_addr functionality
          reuse_addr: true
          # @schema {"name": "job.client_config.dial_option.net.socket_option.tcp_fast_open", "type": "boolean"}
          # job.client_config.dial_option.net.socket_option.tcp_fast_open -- server listen socket option for tcp_fast_open functionality
          tcp_fast_open: true
          # @schema {"name": "job.client_config.dial_option.net.socket_option.tcp_no_delay", "type": "boolean"}
          # job.client_config.dial_option.net.socket_option.tcp_no_delay -- server listen socket option for tcp_no_delay functionality
          tcp_no_delay: true
          # @schema {"name": "job.client_config.dial_option.net.socket_option.tcp_cork", "type": "boolean"}
          # job.client_config.dial_option.net.socket_option.tcp_cork -- server listen socket option for tcp_cork functionality
          tcp_cork: false
          # @schema {"name": "job.client_config.dial_option.net.socket_option.tcp_quick_ack", "type": "boolean"}
          # job.client_config.dial_option.net.socket_option.tcp_quick_ack -- server listen socket option for tcp_quick_ack functionality
          tcp_quick_ack: true
          # @schema {"name": "job.client_config.dial_option.net.socket_option.tcp_defer_accept", "type": "boolean"}
          # job.client_config.dial_option.net.socket_option.tcp_defer_accept -- server listen socket option for tcp_defer_accept functionality
          tcp_defer_accept: true
          # @schema {"name": "job.client_config.dial_option.net.socket_option.ip_transparent", "type": "boolean"}
          # job.client_config.dial_option.net.socket_option.ip_transparent -- server listen socket option for ip_transparent functionality
          ip_transparent: false
          # @schema {"name": "job.client_config.dial_option.net.socket_option.ip_recover_destination_addr", "type": "boolean"}
          # job.client_config.dial_option.net.socket_option.ip_recover_destination_addr -- server listen socket option for ip_recover_destination_addr functionality
          ip_recover_destination_addr: false
      # @schema {"name": "job.client_config.dial_option.keepalive", "type": "object"}
      keepalive:
        # @schema {"name": "job.client_config.dial_option.keepalive.time", "type": "string"}
        # job.client_config.dial_option.keepalive.time -- gRPC client keep alive time
        time: "120s"
        # @schema {"name": "job.client_config.dial_option.keepalive.timeout", "type": "string"}
        # job.client_config.dial_option.keepalive.timeout -- gRPC client keep alive timeout
        timeout: "30s"
        # @schema {"name": "job.client_config.dial_option.keepalive.permit_without_stream", "type": "boolean"}
        # job.client_config.dial_option.keepalive.permit_without_stream -- gRPC client keep alive permit without stream
        permit_without_stream: true
    # @schema {"name": "job.client_config.tls", "type": "object"}
    tls:
      # @schema {"name": "job.client_config.tls.enabled", "type": "boolean"}
      # job.client_config.tls.enabled -- TLS enabled
      enabled: false
      # @schema {"name": "job.client_config.tls.cert", "type": "string"}
      # job.client_config.tls.cert -- TLS cert path
      cert: /path/to/cert
      # @schema {"name": "job.client_config.tls.key", "type": "string"}
      # job.client_config.tls.key -- TLS key path
      key: /path/to/key
      # @schema {"name": "job.client_config.tls.ca", "type": "string"}
      # job.client_config.tls.ca -- TLS ca path
      ca: /path/to/ca
      # @schema {"name": "job.client_config.tls.insecure_skip_verify", "type": "boolean"}
      # job.client_config.tls.insecure_skip_verify -- enable/disable skip SSL certificate verification
      insecure_skip_verify: false
# @schema {"name": "rbac", "type": "object"}
rbac:
  # @schema {"name": "rbac.create", "type": "boolean"}
  # rbac.create -- required roles and rolebindings will be created
  create: true
  # @schema {"name": "rbac.name", "type": "string"}
  # rbac.name -- name of roles and rolebindings
  name: vald-benchmark-operator
# @schema {"name": "serviceAccount", "type": "object"}
serviceAccount:
  # @schema {"name": "serviceAccount.create", "type": "boolean"}
  # serviceAccount.create -- service account will be created
  create: true
  # @schema {"name": "serviceAccount.name", "type": "string"}
  # serviceAccount.name -- name of service account
  name: vald-benchmark-operator
# @schema {"name": "service", "type": "object"}
service:
  # @schema {"name": "service.enabled", "type": "boolean"}
  # service.enabled -- service enabled
  enabled: true
  # @schema {"name": "service.annotations", "type": "object"}
  # service.annotations -- service annotations
  annotations: {}
  # @schema {"name": "service.labels", "type": "object"}
  # service.labels -- service labels
  labels: {}
  # @schema {"name": "service.type", "type": "string", "enum": ["ClusterIP", "LoadBalancer", "NodePort"]}
  # service.type -- service type: ClusterIP, LoadBalancer or NodePort
  type: ClusterIP
  # @schema {"name": "service.externalTrafficPolicy", "type": "string"}
  # service.externalTrafficPolicy -- external traffic policy (can be specified when service type is LoadBalancer or NodePort) : Cluster or Local
  externalTrafficPolicy: ""
# @schema {"name": "annotations", "type": "object"}
# annotations -- deployment annotations
annotations: {}
# @schema {"name": "podAnnotations", "type": "object"}
# podAnnotations -- pod annotations
podAnnotations: {}
# @schema {"name": "securityContext", "type": "object"}
# securityContext -- security context for container
securityContext:
  runAsUser: 65532
  runAsNonRoot: true
  runAsGroup: 65532
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL
# @schema {"name": "podSecurityContext", "type": "object"}
# podSecurityContext -- security context for pod
podSecurityContext:
  runAsUser: 65532
  runAsNonRoot: true
  runAsGroup: 65532
  fsGroup: 65532
  fsGroupChangePolicy: "OnRootMismatch"
# @schema {"name": "resources", "type": "object"}
# resources -- kubernetes resources of pod
resources:
  # @schema {"name": "resources.limits", "type": "object"}
  limits:
    cpu: 300m
    memory: 300Mi
  # @schema {"name": "resources.requests", "type": "object"}
  requests:
    cpu: 200m
    memory: 200Mi
# @schema {"name": "nodeSelector", "type": "object"}
# nodeSelector -- node labels for pod assignment
nodeSelector: {}
# @schema {"name": "tolerations", "type": "array", "items": {"type": "object"}}
# tolerations -- tolerations
tolerations: []
# @schema {"name": "affinity", "type": "object"}
# affinity -- affinity
affinity: {}
# @schema {"name": "logging", "type": "object"}
logging:
  # @schema {"name": "logging.logger", "type": "string", "enum": ["glg", "zap"]}
  # logging.logger -- logger name.
  # currently logger must be `glg` or `zap`.
  logger: glg
  # @schema {"name": "logging.level", "type": "string", "enum": ["debug", "info", "warn", "error", "fatal"]}
  # logging.level -- logging level.
  # logging level must be `debug`, `info`, `warn`, `error` or `fatal`.
  level: debug
  # @schema {"name": "logging.format", "type": "string", "enum": ["raw", "json"]}
  # logging.format -- logging format.
  # logging format must be `raw` or `json`
  format: raw
# @schema {"name": "server_config", "type": "object"}
server_config:
  # @schema {"name": "server_config.servers", "type": "object"}
  servers:
    # @schema {"name": "server_config.servers.rest", "type": "object"}
    rest:
      # @schema {"name": "server_config.servers.rest.enabled", "type": "boolean"}
      enabled: false
    # @schema {"name": "server_config.servers.grpc", "type": "object"}
    grpc:
      # @schema {"name": "server_config.servers.grpc.enabled", "type": "boolean"}
      enabled: true
      # @schema {"name": "server_config.servers.grpc.name", "type": "string"}
      name: grpc
      # @schema {"name": "server_config.servers.grpc.host", "type": "string"}
      host: 0.0.0.0
      # @schema {"name": "server_config.servers.grpc.port", "type": "integer"}
      port: 8081
      # @schema {"name": "server_config.servers.grpc.servicePort", "type": "integer"}
      serviecPort: 8081
      # @schema {"name": "server_config.servers.grpc.server", "type": "object"}
      server:
        # @schema {"name": "server_config.servers.grpc.server.mode", "type": "string"}
        mode: GRPC
        # @schema {"name": "server_config.servers.grpc.server.probe_wait_time", "type": "string"}
        probe_wait_time: 3s
        # @schema {"name": "server_config.servers.grpc.server.network", "type": "string"}
        network: tcp
        # @schema {"name": "server_config.servers.grpc.server.socket_path", "type": "string"}
        socket_path: ""
        # @schema {"name": "server_config.servers.grpc.server.grpc", "type": "object"}
        grpc:
          # @schema {"name": "server_config.servers.grpc.server.grpc.bidirectional_stream_concurrency", "type": "integer"}
          bidirectional_stream_concurrency: 20
          # @schema {"name": "server_config.servers.grpc.server.grpc.connection_timeout", "type": "string"}
          connection_timeout: ""
          # @schema {"name": "server_config.servers.grpc.server.grpc.header_table_size", "type": "integer"}
          header_table_size: 0
          # @schema {"name": "server_config.servers.grpc.server.grpc.initial_conn_window_size", "type": "integer"}
          initial_conn_window_size: 0
          # @schema {"name": "server_config.servers.grpc.server.grpc.initial_window_size", "type": "integer"}
          initial_window_size: 0
          # @schema {"name": "server_config.servers.grpc.server.grpc.interceptors", "type": "array", "items": {"type": "string"}}
          interceptors: []
          # @schema {"name": "server_config.servers.grpc.server.grpc.keepalive", "type": "object"}
          keepalive:
            # @schema {"name": "server_config.servers.grpc.server.grpc.keepalive.max_conn_idle", "type": "string"}
            # server_config.servers.grpc.server.grpc.keepalive.max_conn_idle -- gRPC server keep alive max connection idle
            max_conn_idle: ""
            # @schema {"name": "server_config.servers.grpc.server.grpc.keepalive.max_conn_age", "type": "string"}
            # server_config.servers.grpc.server.grpc.keepalive.max_conn_age -- gRPC server keep alive max connection age
            max_conn_age: ""
            # @schema {"name": "server_config.servers.grpc.server.grpc.keepalive.max_conn_age_grace", "type": "string"}
            # server_config.servers.grpc.server.grpc.keepalive.max_conn_age_grace -- gRPC server keep alive max connection age grace
            max_conn_age_grace: ""
            # @schema {"name": "server_config.servers.grpc.server.grpc.keepalive.time", "type": "string"}
            # server_config.servers.grpc.server.grpc.keepalive.time -- gRPC server keep alive time
            time: "120s"
            # @schema {"name": "server_config.servers.grpc.server.grpc.keepalive.timeout", "type": "string"}
            # server_config.servers.grpc.server.grpc.keepalive.timeout -- gRPC server keep alive timeout
            timeout: "30s"
            # @schema {"name": "server_config.servers.grpc.server.grpc.keepalive.min_time", "type": "string"}
            # server_config.servers.grpc.server.grpc.keepalive.min_time -- gRPC server keep alive min_time
            min_time: "60s"
            # @schema {"name": "server_config.servers.grpc.server.grpc.keepalive.permit_without_stream", "type": "boolean"}
            # server_config.servers.grpc.server.grpc.keepalive.permit_without_stream -- gRPC server keep alive permit_without_stream
            permit_without_stream: true
          # @schema {"name": "server_config.servers.grpc.server.grpc.max_header_list_size", "type": "integer"}
          max_header_list_size: 0
          # @schema {"name": "server_config.servers.grpc.server.grpc.max_receive_message_size", "type": "integer"}
          max_receive_message_size: 0
          # @schema {"name": "server_config.servers.grpc.server.grpc.max_send_msg_size", "type": "integer"}
          max_send_message_size: 0
          # @schema {"name": "server_config.servers.grpc.server.grpc.read_buffer_size", "type": "integer"}
          read_buffer_size: 0
          # @schema {"name": "server_config.servers.grpc.server.grpc.write_buffer_size", "type": "integer"}
          write_buffer_size: 0
          # @schema {"name": "server_config.servers.grpc.server.grpc.enable_reflection", "type": "boolean"}
          enable_reflection: true
        # @schema {"name": "server_config.servers.grpc.server.restart", "type": "boolean"}
        restart: true
  # @schema {"name": "server_config.healths", "type": "object"}
  # health_check_servers:
  healths:
    # @schema {"name": "server_config.healths.liveness", "type": "object"}
    liveness:
      # @schema {"name": "server_config.healths.liveness.enabled", "type": "boolean"}
      enabled: true
      # @schema {"name": "server_config.healths.liveness.host", "type": "string"}
      host: 0.0.0.0
      # @schema {"name": "server_config.healths.liveness.port", "type": "integer"}
      port: 3000
      # @schema {"name": "server_config.healths.liveness.servicePort", "type": "integer"}
      servicePort: 3000
      # @schema {"name": "server_config.healths.liveness.livenessProbe", "type": "object"}
      livenessProbe:
        # @schema {"name": "server_config.healths.liveness.livenessProbe.httpGet", "type": "object"}
        httpGet:
          # @schema {"name": "server_config.healths.liveness.livenessProbe.httpGet.path", "type": "string"}
          # server_config.healths.liveness.livenessProbe.httpGet.path -- readiness probe path
          path: /liveness
          # @schema {"name": "server_config.healths.liveness.livenessProbe.httpGet.port", "type": "string"}
          # server_config.healths.liveness.livenessProbe.httpGet.port -- readiness probe port
          port: liveness
          # @schema {"name": "server_config.healths.liveness.livenessProbe.httpGet.scheme", "type": "string"}
          # server_config.healths.liveness.livenessProbe.httpGet.scheme -- readiness probe scheme
          scheme: HTTP
        # @schema {"name": "server_config.healths.liveness.livenessProbe.initialDelaySeconds", "type": "integer"}
        # server_config.healths.liveness.livenessProbe.initialDelaySeconds -- liveness probe initial delay seconds
        initialDelaySeconds: 15
        # @schema {"name": "server_config.healths.liveness.livenessProbe.periodSeconds", "type": "integer"}
        # server_config.healths.liveness.livenessProbe.periodSeconds -- liveness probe period seconds
        periodSeconds: 20
        # @schema {"name": "server_config.healths.liveness.livenessProbe.successThreshold", "type": "integer"}
        # server_config.healths.liveness.livenessProbe.successThreshold -- liveness probe success threshold
        successThreshold: 1
        # @schema {"name": "server_config.healths.liveness.livenessProbe.failureThreshold", "type": "integer"}
        # server_config.healths.liveness.livenessProbe.failureThreshold -- liveness probe failure threshold
        failureThreshold: 2
        # @schema {"name": "server_config.healths.liveness.livenessProbe.timeoutSeconds", "type": "integer"}
        # server_config.healths.liveness.livenessProbe.timeoutSeconds -- liveness probe timeout seconds
        timeoutSeconds: 5
      # @schema {"name": "server_config.healths.liveness.server", "type": "object"}
      server:
        # @schema {"name": "server_config.healths.liveness.server.mode", "type": "string"}
        mode: ""
        # @schema {"name": "server_config.healths.liveness.server.probe_wait_time", "type": "string"}
        probe_wait_time: 3s
        # @schema {"name": "server_config.healths.liveness.server.network", "type": "string"}
        network: tcp
        # @schema {"name": "server_config.healths.liveness.server.socket_path", "type": "string"}
        socket_path: ""
        # @schema {"name": "server_config.healths.liveness.server.http", "type": "object"}
        http:
          # @schema {"name": "server_config.healths.liveness.server.http.timeout", "type": "string"}
          handler_timeout: ""
          # @schema {"name": "server_config.healths.liveness.server.http.idle_timeout", "type": "string"}
          idle_timeout: ""
          # @schema {"name": "server_config.healths.liveness.server.http.read_header_timeout", "type": "string"}
          read_header_timeout: ""
          # @schema {"name": "server_config.healths.liveness.server.http.read_timeout", "type": "string"}
          read_timeout: ""
          # @schema {"name": "server_config.healths.liveness.server.http.shutdown_duration", "type": "string"}
          shutdown_duration: 5s
          # @schema {"name": "server_config.healths.liveness.server.http.write_timeout", "type": "string"}
          write_timeout: ""
    # @schema {"name": "server_config.healths.readiness", "type": "object"}
    readiness:
      # @schema {"name": "server_config.healths.readiness.enabled", "type": "boolean"}
      enabled: true
      # @schema {"name": "server_config.healths.readiness.host", "type": "string"}
      host: 0.0.0.0
      # @schema {"name": "server_config.healths.readiness.port", "type": "integer"}
      port: 3001
      # @schema {"name": "server_config.healths.readiness.servicePort", "type": "integer"}
      servicePort: 3001
      # @schema {"name": "server_config.healths.readiness.readinessProbe", "type": "object"}
      readinessProbe:
        # @schema {"name": "server_config.healths.readiness.readinessProbe.httpGet", "type": "object"}
        httpGet:
          # @schema {"name": "server_config.healths.readiness.readinessProbe.httpGet.path", "type": "string"}
          # server_config.healths.readiness.readinessProbe.httpGet.path -- readiness probe path
          path: /readiness
          # @schema {"name": "server_config.healths.readiness.readinessProbe.httpGet.port", "type": "string"}
          # server_config.healths.readiness.readinessProbe.httpGet.port -- readiness probe port
          port: readiness
          # @schema {"name": "server_config.healths.readiness.readinessProbe.httpGet.scheme", "type": "string"}
          # server_config.healths.readiness.readinessProbe.httpGet.scheme -- readiness probe scheme
          scheme: HTTP
        # @schema {"name": "server_config.healths.readiness.readinessProbe.initialDelaySeconds", "type": "integer"}
        # server_config.healths.readiness.readinessProbe.initialDelaySeconds -- readiness probe initial delay seconds
        initialDelaySeconds: 10
        # @schema {"name": "server_config.healths.readiness.readinessProbe.periodSeconds", "type": "integer"}
        # server_config.healths.readiness.readinessProbe.periodSeconds -- readiness probe period seconds
        periodSeconds: 3
        # @schema {"name": "server_config.healths.readiness.readinessProbe.successThreshold", "type": "integer"}
        # server_config.healths.readiness.readinessProbe.successThreshold -- readiness probe success threshold
        successThreshold: 1
        # @schema {"name": "server_config.healths.readiness.readinessProbe.failureThreshold", "type": "integer"}
        # server_config.healths.readiness.readinessProbe.failureThreshold --readiness probe failure threshold
        failureThreshold: 2
        # @schema {"name": "server_config.healths.readiness.readinessProbe.timeoutSeconds", "type": "integer"}
        # server_config.healths.readiness.readinessProbe.timeoutSeconds -- readiness probe timeout seconds
        timeoutSeconds: 2
      # @schema {"name": "server_config.healths.readiness.server", "type": "object"}
      server:
        # @schema {"name": "server_config.healths.readiness.server.mode", "type": "string"}
        mode: ""
        # @schema {"name": "server_config.healths.readiness.server.probe_wait_time", "type": "string"}
        probe_wait_time: 3s
        # @schema {"name": "server_config.healths.readiness.server.network", "type": "string"}
        network: tcp
        # @schema {"name": "server_config.healths.readiness.server.socket_path", "type": "string"}
        socket_path: ""
        # @schema {"name": "server_config.healths.readiness.server.http", "type": "object"}
        http:
          # @schema {"name": "server_config.healths.readiness.server.http.handler_timeout", "type": "string"}
          handler_timeout: ""
          # @schema {"name": "server_config.healths.readiness.server.http.idle_timeout", "type": "string"}
          idle_timeout: ""
          # @schema {"name": "server_config.healths.readiness.server.http.read_header_timeout", "type": "string"}
          read_header_timeout: ""
          # @schema {"name": "server_config.healths.readiness.server.http.read_timeout", "type": "string"}
          read_timeout: ""
          # @schema {"name": "server_config.healths.readiness.server.http.shutdown_duration", "type": "string"}
          shutdown_duration: 0s
          # @schema {"name": "server_config.healths.readiness.server.http.write_timeout", "type": "string"}
          write_timeout: ""
    # @schema {"name": "server_config.healths.startup", "type": "object"}
    startup:
      # @schema {"name": "server_config.healths.startup.enabled", "type": "boolean"}
      # server_config.healths.startup.enabled -- enable startup probe.
      enabled: true
      # @schema {"name": "server_config.healths.startupProbe", "type": "object"}
      startupProbe:
        # @schema {"name": "server_config.healths.startupProbe.httpGet", "type": "object"}
        httpGet:
          # @schema {"name": "server_config.healths.startupProbe.httpGet.path", "type": "string"}
          # server_config.healths.startupProbe.httpGet.path -- startup probe path
          path: /liveness
          # @schema {"name": "server_config.healths.startupProbe.httpGet.port", "type": "string"}
          # server_config.healths.startupProbe.httpGet.port -- startup probe port
          port: liveness
          # @schema {"name": "server_config.healths.startupProbe.httpGet.scheme", "type": "string"}
          # server_config.healths.startupProbe.httpGet.scheme -- startup probe scheme
          scheme: HTTP
        # @schema {"name": "server_config.healths.startupProbe.initialDelaySeconds", "type": "integer"}
        # server_config.healths.startupProbe.initialDelaySeconds -- startup probe initial delay seconds
        initialDelaySeconds: 5
        # @schema {"name": "server_config.healths.startupProbe.periodSeconds", "type": "integer"}
        # server_config.healths.startupProbe.periodSeconds -- startup probe period seconds
        periodSeconds: 5
        # @schema {"name": "server_config.healths.startupProbe.successThreshold", "type": "integer"}
        # server_config.healths.startupProbe.successThreshold -- startup probe success threshold
        successThreshold: 1
        # @schema {"name": "server_config.healths.startupProbe.failureThreshold", "type": "integer"}
        # server_config.healths.startupProbe.failureThreshold -- startupProbe probe failure threshold
        failureThreshold: 30
        # @schema {"name": "server_config.healths.startupProbe.timeoutSeconds", "type": "integer"}
        # server_config.healths.startupProbe.timeoutSeconds -- startup probe timeout seconds
        timeoutSeconds: 2
  # @schema {"name": "server_config.metrics", "type": "object"}
  metrics:
    # @schema {"name": "server_config.metrics.pprof", "type": "object"}
    pprof:
      # @schema {"name": "server_config.metrics.pprof.enabled", "type": "boolean"}
      enabled: false
      # @schema {"name": "server_config.metrics.pprof.host", "type": "string"}
      host: 0.0.0.0
      # @schema {"name": "server_config.metrics.pprof.port", "type": "integer"}
      port: 6060
      # @schema {"name": "server_config.metrics.pprof.server", "type": "object"}
      server:
        # @schema {"name": "server_config.metrics.pprof.server.mode", "type": "string"}
        mode: REST
        # @schema {"name": "server_config.metrics.pprof.server.probe_wait_time", "type": "string"}
        probe_wait_time: 3s
        # @schema {"name": "server_config.metrics.pprof.server.network", "type": "string"}
        network: tcp
        # @schema {"name": "server_config.metrics.pprof.server.socket_path", "type": "string"}
        socket_path: ""
        # @schema {"name": "server_config.metrics.pprof.server.http", "type": "object"}
        http:
          # @schema {"name": "server_config.metrics.pprof.server.http.handler_timeout", "type": "string"}
          handler_timeout: 5s
          # @schema {"name": "server_config.metrics.pprof.server.http.idle_timeout", "type": "string"}
          idle_timeout: 2s
          # @schema {"name": "server_config.metrics.pprof.server.http.read_header_timeout", "type": "string"}
          read_header_timeout: 1s
          # @schema {"name": "server_config.metrics.pprof.server.http.read_timeout", "type": "string"}
          read_timeout: 1s
          # @schema {"name": "server_config.metrics.pprof.server.http.shutdown_duration", "type": "string"}
          shutdown_duration: 5s
          # @schema {"name": "server_config.metrics.pprof.server.http.write_timeout", "type": "string"}
          write_timeout: 1m
  # @schema {"name": "server_config.full_shutdown_duration", "type": "string"}
  full_shutdown_duration: 600s
  # @schema {"name": "server_config.tls", "type": "object"}
  tls:
    # @schema {"name": "server_config.tls.enabled", "type": "boolean"}
    enabled: false
    # @schema {"name": "server_config.tls.ca", "type": "string"}
    ca: /path/to/ca
    # @schema {"name": "server_config.tls.cert", "type": "string"}
    cert: /path/to/cert
    # @schema {"name": "server_config.tls.key", "type": "string"}
    key: /path/to/key
    # @schema {"name": "server_config.tls.insecure_skip_verify", "type": "boolean"}
    # server_config.tls.insecure_skip_verify -- enable/disable skip SSL certificate verification
    insecure_skip_verify: false
# @schema {"name": "observability", "type": "object"}
observability:
  # @schema {"name": "observability.enabled", "type": "boolean"}
  enabled: false
  # @schema {"name": "observability.otlp", "type": "object"}
  otlp:
    # @schema {"name": "observability.otlp.collector_endpoint", "type": "string"}
    collector_endpoint: ""
    # @schema {"name": "observability.otlp.trace_batch_timeout", "type": "string"}
    trace_batch_timeout: "1s"
    # @schema {"name": "observability.otlp.trace_export_timeout", "type": "string"}
    trace_export_timeout: "1m"
    # @schema {"name": "observability.otlp.trace_max_export_batch_size", "type": "integer"}
    trace_max_export_batch_size: 1024
    # @schema {"name": "observability.otlp.trace_max_queue_size", "type": "integer"}
    trace_max_queue_size: 256
    # @schema {"name": "observability.otlp.metrics_export_interval", "type": "string"}
    metrics_export_interval: "1s"
    # @schema {"name": "observability.otlp.metrics_export_timeout", "type": "string"}
    metrics_export_timeout: "1m"
    # @schema {"name": "observability.otlp.attribute", "type": "object"}
    attribute:
      # @schema {"name": "observability.otlp.attribute.namespace", "type": "string"}
      namespace: _MY_POD_NAMESPACE_
      # @schema {"name": "observability.otlp.attribute.pod_name", "type": "string"}
      pod_name: _MY_POD_NAME_
      # @schema {"name": "observability.otlp.attribute.node_name", "type": "string"}
      node_name: _MY_NODE_NAME_
      # @schema {"name": "observability.otlp.attribute.service_name", "type": "string"}
      service_name: "vald-benchmark-operator"
  # @schema {"name": "observability.otlp.attribute.metrics", "type": "object"}
  metrics:
    # @schema {"name": "observability.otlp.attribute.metrics.enable_cgo", "type": "boolean"}
    enable_cgo: true
    # @schema {"name": "observability.otlp.attribute.metrics.enable_goroutine", "type": "boolean"}
    enable_goroutine: true
    # @schema {"name": "observability.otlp.attribute.metrics.enable_memory", "type": "boolean"}
    enable_memory: true
    # @schema {"name": "observability.otlp.attribute.metrics.enable_version_info", "type": "boolean"}
    enable_version_info: true
    # @schema {"name": "observability.otlp.attribute.metrics.version_info_labels", "type": "array", "items": {"type": "string"}}
    version_info_labels:
      - vald_version
      - server_name
      - git_commit
      - build_time
      - go_version
      - go_os
      - go_arch
      - algorithm_info
  # @schema {"name": "observability.trace", "type": "object"}
  trace:
    # @schema {"name": "observability.trace.enabled", "type": "boolean"}
    enabled: false
    # @schema {"name": "observability.trace.sampling_rate", "type": "integer"}
    sampling_rate: 1
# @schema {"name": "env", "type": "array", "items": {"type": "object"}, "anchor": "env"}
# env -- environment variables
env:
  - name: MY_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: MY_POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: MY_POD_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  - name: JOB_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
