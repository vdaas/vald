//
// Copyright (C) 2019-2022 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
package conv

import (
	"reflect"
	"testing"

	"github.com/pkg/errors"
	"github.com/vdaas/vald/internal/test/goleak"
)

// NOTE: generated by https://json-generator.com/
var testJson = `
[
  {
    "_id": "6228304e91ff005521f055a0",
    "index": 0,
    "guid": "32a05fca-9759-41fa-882c-a878f670d3f5",
    "isActive": false,
    "balance": "$1,943.23",
    "picture": "http://placehold.it/32x32",
    "age": 33,
    "eyeColor": "green",
    "name": "Goodman Fitzgerald",
    "gender": "male",
    "company": "ORBIXTAR",
    "email": "goodmanfitzgerald@orbixtar.com",
    "phone": "+1 (808) 547-2333",
    "address": "750 Sunnyside Avenue, Maybell, Vermont, 356",
    "about": "In esse nisi quis nisi cupidatat. Qui esse magna consequat amet mollit adipisicing adipisicing proident. Consequat consequat quis velit non proident. Consequat commodo magna sit do labore. Sunt reprehenderit do id deserunt voluptate velit ullamco.\r\n",
    "registered": "2018-10-17T03:11:06 -09:00",
    "latitude": 4.696977,
    "longitude": -90.128225,
    "tags": [
      "non",
      "voluptate",
      "excepteur",
      "est",
      "tempor",
      "id",
      "nostrud"
    ],
    "friends": [
      {
        "id": 0,
        "name": "Marcy Sheppard"
      },
      {
        "id": 1,
        "name": "Santos Donaldson"
      },
      {
        "id": 2,
        "name": "Shari Orr"
      }
    ],
    "greeting": "Hello, Goodman Fitzgerald! You have 7 unread messages.",
    "favoriteFruit": "banana"
  }
]
`

func TestBtoa(t *testing.T) {
	type args struct {
		b []byte
	}
	type want struct {
		want string
	}
	type test struct {
		name       string
		args       args
		want       want
		checkFunc  func(want, string) error
		beforeFunc func(args)
		afterFunc  func(args)
	}
	defaultCheckFunc := func(w want, got string) error {
		if !reflect.DeepEqual(got, w.want) {
			return errors.Errorf("got: \"%#v\",\n\t\t\t\twant: \"%#v\"", got, w.want)
		}
		return nil
	}
	tests := []test{
		{
			name: "returns empty when bytes is nil",
			args: args{
				b: nil,
			},
			want: want{
				want: "",
			},
		},
		{
			name: "returns empty when bytes is empty",
			args: args{
				b: []byte{},
			},
			want: want{
				want: "",
			},
		},
		{
			name: "returns json string when bytes is json data",
			args: args{
				b: []byte(testJson),
			},
			want: want{
				want: testJson,
			},
		},
	}

	for _, tc := range tests {
		test := tc
		t.Run(test.name, func(tt *testing.T) {
			tt.Parallel()
			defer goleak.VerifyNone(tt, goleak.IgnoreCurrent())
			if test.beforeFunc != nil {
				test.beforeFunc(test.args)
			}
			if test.afterFunc != nil {
				defer test.afterFunc(test.args)
			}
			checkFunc := test.checkFunc
			if test.checkFunc == nil {
				checkFunc = defaultCheckFunc
			}

			got := Btoa(test.args.b)
			if err := checkFunc(test.want, got); err != nil {
				tt.Errorf("error = %v", err)
			}
		})
	}
}
