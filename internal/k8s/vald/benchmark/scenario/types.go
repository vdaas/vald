//
// Copyright (C) 2019-2022 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package scenario

import (
	job "github.com/vdaas/vald/internal/k8s/vald/benchmark/job"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

type BenchmarkScenarioSpec struct {
	Target  *job.BenchmarkTarget
	Dataset *job.BenchmarkDataset
	Jobs    []*job.BenchmarkJobSpec
}

type BenchmarkScenarioStatus string

const (
	BenchmarkScenarioNotReady  BenchmarkScenarioStatus = "NotReady"
	BenchmarkScenarioAvailable BenchmarkScenarioStatus = "Available"
	BenchmarkScenarioHealthy   BenchmarkScenarioStatus = "Healthy"
)

type BenchmarkScenario struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   BenchmarkScenarioSpec   `json:"spec,omitempty"`
	Status BenchmarkScenarioStatus `json:"status,omitempty"`
}

type BenchmarkScenarioList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BenchmarkScenario `json:"items"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BenchmarkScenario) DeepCopyInto(out *BenchmarkScenario) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BenchmarkScenario.
func (in *BenchmarkScenario) DeepCopy() *BenchmarkScenario {
	if in == nil {
		return nil
	}
	out := new(BenchmarkScenario)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BenchmarkScenario) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BenchmarkScenarioList) DeepCopyInto(out *BenchmarkScenarioList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BenchmarkScenario, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BenchmarkScenarioList.
func (in *BenchmarkScenarioList) DeepCopy() *BenchmarkScenarioList {
	if in == nil {
		return nil
	}
	out := new(BenchmarkScenarioList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BenchmarkScenarioList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BenchmarkScenarioSpec) DeepCopyInto(out *BenchmarkScenarioSpec) {
	*out = *in
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(job.BenchmarkTarget)
		**out = **in
	}
	if in.Dataset != nil {
		in, out := &in.Dataset, &out.Dataset
		*out = new(job.BenchmarkDataset)
		(*in).DeepCopyInto(*out)
	}
	if in.Jobs != nil {
		in, out := &in.Jobs, &out.Jobs
		*out = make([]*job.BenchmarkJobSpec, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(job.BenchmarkJobSpec)
				(*in).DeepCopyInto(*out)
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BenchmarkScenarioSpec.
func (in *BenchmarkScenarioSpec) DeepCopy() *BenchmarkScenarioSpec {
	if in == nil {
		return nil
	}
	out := new(BenchmarkScenarioSpec)
	in.DeepCopyInto(out)
	return out
}
