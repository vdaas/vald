//
// Copyright (C) 2019-2020 Vdaas.org Vald team ( kpango, rinx, kmrmt )
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package backup_manager;

option go_package = "github.com/vdaas/vald/apis/grpc/manager/backup";
option java_multiple_files = true;
option java_package = "org.vdaas.vald.manager.backup";
option java_outer_classname = "ValdBackupManager";

import "payload.proto";
import "google/api/annotations.proto";
import "pb/gql.proto";

service Backup {
  option (gql.svc_type) = QUERY;

  rpc GetVector(payload.Backup.GetVector.Request) returns (payload.Backup.Compressed.MetaVector) {
    option (google.api.http).get = "/vector/{uuid}";
  }

  rpc Locations(payload.Backup.Locations.Request) returns (payload.Info.IPs) {
    option (google.api.http).get = "/locations/{uuid}";
  }

  rpc Register(payload.Backup.Compressed.MetaVector) returns (payload.Empty) {
    option (google.api.http) = {
      post : "/register"
      body : "*"
    };
    option (gql.rpc_type) = MUTATION;
  }

  rpc RegisterMulti(payload.Backup.Compressed.MetaVectors) returns (payload.Empty) {
    option (google.api.http) = {
      post : "/register/multi"
      body : "*"
    };
    option (gql.rpc_type) = MUTATION;
  }

  rpc Remove(payload.Backup.Remove.Request) returns (payload.Empty) {
    option (google.api.http).delete = "/delete/{uuid}";
    option (gql.rpc_type) = MUTATION;
  }

  rpc RemoveMulti(payload.Backup.Remove.RequestMulti) returns (payload.Empty) {
    option (google.api.http) = {
      post : "/delete/multi"
      body : "*"
    };
    option (gql.rpc_type) = MUTATION;
  }

  rpc RegisterIPs(payload.Backup.IP.Register.Request) returns (payload.Empty) {
    option (google.api.http) = {
      post : "/ip"
      body : "*"
    };
    option (gql.rpc_type) = MUTATION;
  }

  rpc RemoveIPs(payload.Backup.IP.Remove.Request) returns (payload.Empty) {
    option (google.api.http) = {
      post : "/ip/delete"
      body : "*"
    };
    option (gql.rpc_type) = MUTATION;
  }
}
