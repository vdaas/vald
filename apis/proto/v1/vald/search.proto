//
// Copyright (C) 2019-2020 Vdaas.org Vald team ( kpango, rinx, kmrmt )
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package vald;

option go_package = "github.com/vdaas/vald/apis/grpc/v1/vald";
option java_multiple_files = true;
option java_package = "org.vdaas.vald.api.v1.vald";
option java_outer_classname = "ValdSearch";

import "apis/proto/v1/payload/payload.proto";
import "google/api/annotations.proto";


service Search {

  rpc Search(payload.Search.Request) returns (payload.Search.Response) {
    option (google.api.http) = {
      post : "/search"
      body : "*"
    };
  }
  rpc SearchByID(payload.Search.IDRequest) returns (payload.Search.Response) {
    option (google.api.http) = {
      post : "/search/id"
      body : "*"
    };
  }
  rpc StreamSearch(stream payload.Search.Request)
      returns (stream payload.Search.Response) {}
  rpc StreamSearchByID(stream payload.Search.IDRequest)
      returns (stream payload.Search.Response) {}
  rpc MultiSearch(payload.Search.MultiRequest)
      returns (payload.Search.Responses) {}
  rpc MultiSearchByID(payload.Search.MultiIDRequest)
      returns (payload.Search.Responses) {}

}
