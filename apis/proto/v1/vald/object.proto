//
// Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package vald.v1;

import "google/api/annotations.proto";
import "v1/payload/payload.proto";

option go_package = "github.com/vdaas/vald/apis/grpc/v1/vald";
option java_multiple_files = true;
option java_outer_classname = "ValdObject";
option java_package = "org.vdaas.vald.api.v1.vald";

// Overview
// Object Service is responsible for getting inserted vectors and checking whether vectors are inserted into the `vald-agent`.
service Object {
  // Overview
  // Exists RPC is the method to check that a vector exists in the `vald-agent`.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  5   | NOT_FOUND         |
  // |  13  | INTERNAL          |
  // ---
  // Troubleshooting
  // The request process may not be completed when the response code is NOT `0 (OK)`.
  //
  // Here are some common reasons and how to resolve each error.
  //
  // | name              | common reason                                                                                   | how to resolve                                                                           |
  // | :---------------- | :---------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
  // | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server. | Check the code, especially around timeout and connection management, and fix if needed.  |
  // | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                         | Check request payload and fix request payload.                                           |
  // | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
  // | NOT_FOUND         | Requested ID is NOT inserted.                                                                   | Send a request with an ID that is already inserted.                                      |
  // | INTERNAL          | Target Vald cluster or network route has some critical error.                                   | Check target Vald cluster first and check network route including ingress as second.     |
  rpc Exists(payload.v1.Object.ID) returns (payload.v1.Object.ID) {
    option (google.api.http).get = "/exists/{id}";
  }

  // Overview
  // GetObject RPC is the method to get the metadata of a vector inserted into the `vald-agent`.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  5   | NOT_FOUND         |
  // |  13  | INTERNAL          |
  // ---
  // Troubleshooting
  // The request process may not be completed when the response code is NOT `0 (OK)`.
  //
  // Here are some common reasons and how to resolve each error.
  //
  // | name              | common reason                                                                                   | how to resolve                                                                           |
  // | :---------------- | :---------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
  // | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server. | Check the code, especially around timeout and connection management, and fix if needed.  |
  // | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                         | Check request payload and fix request payload.                                           |
  // | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
  // | NOT_FOUND         | Requested ID is NOT inserted.                                                                   | Send a request with an ID that is already inserted.                                      |
  // | INTERNAL          | Target Vald cluster or network route has some critical error.                                   | Check target Vald cluster first and check network route including ingress as second.     |
  rpc GetObject(payload.v1.Object.VectorRequest) returns (payload.v1.Object.Vector) {
    option (google.api.http).get = "/object/{id.id}";
  }

  // Overview
  // StreamGetObject RPC is the method to get the metadata of multiple existing vectors using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).<br>
  // Using the bidirectional streaming RPC, the GetObject request can be communicated in any order between client and server.
  // Each Upsert request and response are independent.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  5   | NOT_FOUND         |
  // |  13  | INTERNAL          |
  // ---
  // Troubleshooting
  // The request process may not be completed when the response code is NOT `0 (OK)`.
  //
  // Here are some common reasons and how to resolve each error.
  //
  // | name              | common reason                                                                                   | how to resolve                                                                           |
  // | :---------------- | :---------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
  // | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server. | Check the code, especially around timeout and connection management, and fix if needed.  |
  // | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                         | Check request payload and fix request payload.                                           |
  // | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
  // | NOT_FOUND         | Requested ID is NOT inserted.                                                                   | Send a request with an ID that is already inserted.                                      |
  // | INTERNAL          | Target Vald cluster or network route has some critical error.                                   | Check target Vald cluster first and check network route including ingress as second.     |
  rpc StreamGetObject(stream payload.v1.Object.VectorRequest) returns (stream payload.v1.Object.StreamVector) {}

  // Overview
  // A method to get all the vectors with server streaming
  // ---
  // Status Code
  // TODO
  // ---
  // Troubleshooting
  // TODO
  rpc StreamListObject(payload.v1.Object.List.Request) returns (stream payload.v1.Object.List.Response) {
    option (google.api.http).get = "/object/list";
  }

  // Overview
  // Represent the RPC to get the vector metadata. This RPC is mainly used for index correction process
  // ---
  // Status Code
  // TODO
  // ---
  // Troubleshooting
  // TODO
  rpc GetTimestamp(payload.v1.Object.TimestampRequest) returns (payload.v1.Object.Timestamp) {
    option (google.api.http).get = "/object/meta/{id.id}";
  }
}
