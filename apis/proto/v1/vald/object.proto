//
// Copyright (C) 2019-2023 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package vald.v1;

import "apis/proto/v1/payload/payload.proto";
import "github.com/googleapis/googleapis/google/api/annotations.proto";

option go_package = "github.com/vdaas/vald/apis/grpc/v1/vald";
option java_multiple_files = true;
option java_outer_classname = "ValdObject";
option java_package = "org.vdaas.vald.api.v1.vald";

// Object service provides ways to fetch indexed vectors.
service Object {
  // A method to check whether a specified ID is indexed or not.
  rpc Exists(payload.v1.Object.ID) returns (payload.v1.Object.ID) {
    option (google.api.http).get = "/exists/{id}";
  }

  // A method to fetch a vector.
  rpc GetObject(payload.v1.Object.VectorRequest) returns (payload.v1.Object.Vector) {
    option (google.api.http).get = "/object/{id.id}";
  }

  // A method to fetch vectors by bidirectional streaming.
  rpc StreamGetObject(stream payload.v1.Object.VectorRequest) returns (stream payload.v1.Object.StreamVector) {}

  // A method to get all the vectors with server streaming
  rpc StreamListObject(payload.v1.Object.List.Request) returns (stream payload.v1.Object.List.Response) {
    option (google.api.http).get = "/object/list";
  }
}
