//
// Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package vald.v1;

import "google/api/annotations.proto";
import "v1/payload/payload.proto";

option go_package = "github.com/vdaas/vald/apis/grpc/v1/vald";
option java_multiple_files = true;
option java_outer_classname = "ValdFilter";
option java_package = "org.vdaas.vald.api.v1.vald";

// Overview
// Filter Server is responsible for providing insert, update, upsert and search interface for `Vald Filter Gateway`.
// 
// Vald Filter Gateway forward user request to user-defined ingress/egress filter components allowing user to run custom logic.
service Filter {
  // Overview
  // SearchObject RPC is the method to search object(s) similar to request object.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc SearchObject(payload.v1.Search.ObjectRequest) returns (payload.v1.Search.Response) {
    option (google.api.http) = {
      post: "/search/object"
      body: "*"
    };
  }

  // Overview
  // StreamSearchObject RPC is the method to search vectors with multi queries(objects) using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).<br>
  // By using the bidirectional streaming RPC, the search request can be communicated in any order between client and server.
  // Each Search request and response are independent.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc MultiSearchObject(payload.v1.Search.MultiObjectRequest) returns (payload.v1.Search.Responses) {
    option (google.api.http) = {
      post: "/search/object/multiple"
      body: "*"
    };
  }

  // Overview
  // MultiSearchObject RPC is the method to search objects with multiple objects in **1** request.
  // 
  // <div class="notice">
  // gRPC has a message size limitation.<br>
  // Please be careful that the size of the request exceeds the limit.
  // </div>
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc StreamSearchObject(stream payload.v1.Search.ObjectRequest) returns (stream payload.v1.Search.StreamResponse) {}

  // Overview
  // InsertObject RPC is the method to insert object through Vald Filter Gateway.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc InsertObject(payload.v1.Insert.ObjectRequest) returns (payload.v1.Object.Location) {
    option (google.api.http) = {
      post: "/insert/object"
      body: "*"
    };
  }

  // Overview
  // StreamInsertObject RPC is the method to add new multiple object using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).
  // 
  // By using the bidirectional streaming RPC, the insert request can be communicated in any order between client and server.
  // Each Insert request and response are independent.
  // It's the recommended method to insert a large number of objects.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc StreamInsertObject(stream payload.v1.Insert.ObjectRequest) returns (stream payload.v1.Object.StreamLocation) {}

  // Overview
  // MultiInsertObject RPC is the method to add multiple new objects in **1** request.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc MultiInsertObject(payload.v1.Insert.MultiObjectRequest) returns (payload.v1.Object.Locations) {
    option (google.api.http) = {
      post: "/insert/object/multiple"
      body: "*"
    };
  }

  // Overview
  // UpdateObject RPC is the method to update a single vector.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc UpdateObject(payload.v1.Update.ObjectRequest) returns (payload.v1.Object.Location) {
    option (google.api.http) = {
      post: "/update/object"
      body: "*"
    };
  }

  // Overview
  // StreamUpdateObject RPC is the method to update multiple objects using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).<br>
  // By using the bidirectional streaming RPC, the update request can be communicated in any order between client and server.
  // Each Update request and response are independent.
  // It's the recommended method to update the large amount of objects.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc StreamUpdateObject(stream payload.v1.Update.ObjectRequest) returns (stream payload.v1.Object.StreamLocation) {}

  // Overview
  // MultiUpdateObject is the method to update multiple objects in **1** request.
  // 
  // <div class="notice">
  // gRPC has the message size limitation.<br>
  // Please be careful that the size of the request exceed the limit.
  // </div>
  // ---
  // Status Code
  // 
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc MultiUpdateObject(payload.v1.Update.MultiObjectRequest) returns (payload.v1.Object.Locations) {
    option (google.api.http) = {
      post: "/update/object/multiple"
      body: "*"
    };
  }

  // Overview
  // UpsertObject RPC is the method to update a single object and add a new single object.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc UpsertObject(payload.v1.Upsert.ObjectRequest) returns (payload.v1.Object.Location) {
    option (google.api.http) = {
      post: "/upsert/object"
      body: "*"
    };
  }

  // Overview
  // UpsertObject RPC is the method to update a single object and add a new single object.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc StreamUpsertObject(stream payload.v1.Upsert.ObjectRequest) returns (stream payload.v1.Object.StreamLocation) {}

  // Overview
  // MultiUpsertObject is the method to update existing multiple objects and add new multiple objects in **1** request.
  // 
  // <div class="notice">
  // gRPC has a message size limitation.<br>
  // Please be careful that the size of the request exceeds the limit.
  // </div>
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  6   | ALREADY_EXISTS    |
  // |  13  | INTERNAL          |
  rpc MultiUpsertObject(payload.v1.Upsert.MultiObjectRequest) returns (payload.v1.Object.Locations) {
    option (google.api.http) = {
      post: "/upsert/object/multiple"
      body: "*"
    };
  }
}
