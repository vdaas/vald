//
// Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package vald.v1;

import "google/api/annotations.proto";
import "v1/payload/payload.proto";

option go_package = "github.com/vdaas/vald/apis/grpc/v1/vald";
option java_multiple_files = true;
option java_outer_classname = "ValdUpdate";
option java_package = "org.vdaas.vald.api.v1.vald";

// Overview
// Update Service updates to new vector from inserted vector in the `vald-agent` components.
service Update {
  // Overview
  // Update RPC is the method to update a single vector.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  5   | NOT_FOUND         |
  // |  6   | ALREADY_EXISTS    |
  // |  10  | ABORTED           |
  // |  13  | INTERNAL          |
  // ---
  // Troubleshooting
  // The request process may not be completed when the response code is NOT `0 (OK)`.
  // 
  // Here are some common reasons and how to resolve each error.
  // 
  // | name              | common reason                                                                                                                                       | how to resolve                                                                           |
  // | :---------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
  // | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                                                     | Check the code, especially around timeout and connection management, and fix if needed.  |
  // | INVALID_ARGUMENT  | The Dimension of the request vector is NOT the same as Vald Agent's config, the requested vector's ID is empty, or some request payload is invalid. | Check Agent config, request payload, and fix request payload or Agent config.            |
  // | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                                                     | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
  // | NOT_FOUND         | Requested ID is NOT inserted.                                                                                                                       | Send a request with an ID that is already inserted.                                      |
  // | ALREADY_EXISTS    | Request pair of ID and vector is already inserted.                                                                                                  | Change request ID.                                                                       |
  // | INTERNAL          | Target Vald cluster or network route has some critical error.                                                                                       | Check target Vald cluster first and check network route including ingress as second.     |
  rpc Update(payload.v1.Update.Request) returns (payload.v1.Object.Location) {
    option (google.api.http) = {
      post: "/update"
      body: "*"
    };
  }

  // Overview
  // StreamUpdate RPC is the method to update multiple vectors using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).<br>
  // Using the bidirectional streaming RPC, the update request can be communicated in any order between client and server.
  // Each Update request and response are independent.
  // It's the recommended method to update the large amount of vectors.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  5   | NOT_FOUND         |
  // |  6   | ALREADY_EXISTS    |
  // |  10  | ABORTED           |
  // |  13  | INTERNAL          |
  // ---
  // Troubleshooting
  // The request process may not be completed when the response code is NOT `0 (OK)`.
  // 
  // Here are some common reasons and how to resolve each error.
  // 
  // | name              | common reason                                                                                                                                       | how to resolve                                                                           |
  // | :---------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
  // | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                                                     | Check the code, especially around timeout and connection management, and fix if needed.  |
  // | INVALID_ARGUMENT  | The Dimension of the request vector is NOT the same as Vald Agent's config, the requested vector's ID is empty, or some request payload is invalid. | Check Agent config, request payload, and fix request payload or Agent config.            |
  // | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                                                     | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
  // | NOT_FOUND         | Requested ID is NOT inserted.                                                                                                                       | Send a request with an ID that is already inserted.                                      |
  // | ALREADY_EXISTS    | Request pair of ID and vector is already inserted.                                                                                                  | Change request ID.                                                                       |
  // | INTERNAL          | Target Vald cluster or network route has some critical error.                                                                                       | Check target Vald cluster first and check network route including ingress as second.     |
  rpc StreamUpdate(stream payload.v1.Update.Request) returns (stream payload.v1.Object.StreamLocation) {}

  // Overview
  // MultiUpdate is the method to update multiple vectors in **1** request.
  // 
  // <div class="notice">
  // gRPC has a message size limitation.<br>
  // Please be careful that the size of the request exceeds the limit.
  // </div>
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  5   | NOT_FOUND         |
  // |  6   | ALREADY_EXISTS    |
  // |  10  | ABORTED           |
  // |  13  | INTERNAL          |
  // ---
  // Troubleshooting
  // The request process may not be completed when the response code is NOT `0 (OK)`.
  // 
  // Here are some common reasons and how to resolve each error.
  // 
  // | name              | common reason                                                                                                                                       | how to resolve                                                                           |
  // | :---------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
  // | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                                                     | Check the code, especially around timeout and connection management, and fix if needed.  |
  // | INVALID_ARGUMENT  | The Dimension of the request vector is NOT the same as Vald Agent's config, the requested vector's ID is empty, or some request payload is invalid. | Check Agent config, request payload, and fix request payload or Agent config.            |
  // | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                                                     | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
  // | NOT_FOUND         | Requested ID is NOT inserted.                                                                                                                       | Send a request with an ID that is already inserted.                                      |
  // | ALREADY_EXISTS    | Request pair of ID and vector is already inserted.                                                                                                  | Change request ID.                                                                       |
  // | INTERNAL          | Target Vald cluster or network route has some critical error.                                                                                       | Check target Vald cluster first and check network route including ingress as second.     |
  rpc MultiUpdate(payload.v1.Update.MultiRequest) returns (payload.v1.Object.Locations) {
    option (google.api.http) = {
      post: "/update/multiple"
      body: "*"
    };
  }

  // Overview
  // A method to update timestamp an indexed vector.
  // ---
  // Status Code
  // TODO
  // ---
  // Troubleshooting
  // TODO
  rpc UpdateTimestamp(payload.v1.Update.TimestampRequest) returns (payload.v1.Object.Location) {
    option (google.api.http) = {
      post: "/update/timestamp"
      body: "*"
    };
  }
}
