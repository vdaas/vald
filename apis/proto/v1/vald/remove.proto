//
// Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package vald.v1;

import "google/api/annotations.proto";
import "v1/payload/payload.proto";

option go_package = "github.com/vdaas/vald/apis/grpc/v1/vald";
option java_multiple_files = true;
option java_outer_classname = "ValdRemove";
option java_package = "org.vdaas.vald.api.v1.vald";

// Overview
// Remove Service is responsible for removing vectors indexed in the `vald-agent`.
service Remove {
  // Overview
  // Remove RPC is the method to remove a single vector.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  5   | NOT_FOUND         |
  // |  10  | ABORTED           |
  // |  13  | INTERNAL          |
  // ---
  // Troubleshooting
  // The request process may not be completed when the response code is NOT `0 (OK)`.
  //
  // Here are some common reasons and how to resolve each error.
  //
  // | name              | common reason                                                                                   | how to resolve                                                                           |
  // | :---------------- | :---------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
  // | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server. | Check the code, especially around timeout and connection management, and fix if needed.  |
  // | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                         | Check request payload and fix request payload.                                           |
  // | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
  // | NOT_FOUND         | Requested ID is NOT inserted.                                                                   | Send a request with an ID that is already inserted.                                      |
  // | INTERNAL          | Target Vald cluster or network route has some critical error.                                   | Check target Vald cluster first and check network route including ingress as second.     |
  rpc Remove(payload.v1.Remove.Request) returns (payload.v1.Object.Location) {
    option (google.api.http) = {
      post: "/remove"
      body: "*"
    };
  }

  // Overview
  // RemoveByTimestamp RPC is the method to remove vectors based on timestamp.
  //
  // <div class="notice">
  // In the TimestampRequest message, the 'timestamps' field is repeated, allowing the inclusion of multiple Timestamp.<br>
  // When multiple Timestamps are provided, it results in an `AND` condition, enabling the realization of deletions with specified ranges.<br>
  // This design allows for versatile deletion operations, facilitating tasks such as removing data within a specific time range.
  // </div>
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  4   | DEADLINE_EXCEEDED |
  // |  5   | NOT_FOUND         |
  // |  13  | INTERNAL          |
  // ---
  // Troubleshooting
  // The request process may not be completed when the response code is NOT `0 (OK)`.
  //
  // Here are some common reasons and how to resolve each error.
  //
  // | name              | common reason                                                                                   | how to resolve                                                                                                       |
  // | :---------------- | :---------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------- |
  // | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server. | Check the code, especially around timeout and connection management, and fix if needed.                              |
  // | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed.                             |
  // | NOT_FOUND         | No vectors in the system match the specified timestamp conditions.                              | Check whether vectors matching the specified timestamp conditions exist in the system, and fix conditions if needed. |
  // | INTERNAL          | Target Vald cluster or network route has some critical error.                                   | Check target Vald cluster first and check network route including ingress as second.
  rpc RemoveByTimestamp(payload.v1.Remove.TimestampRequest) returns (payload.v1.Object.Locations) {
    option (google.api.http) = {
      post: "/remove/timestamp"
      body: "*"
    };
  }

  // Overview
  // A method to remove multiple indexed vectors by bidirectional streaming.
  //
  // StreamRemove RPC is the method to remove multiple vectors using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).<br>
  // Using the bidirectional streaming RPC, the remove request can be communicated in any order between client and server.
  // Each Remove request and response are independent.
  // It's the recommended method to remove a large number of vectors.
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  5   | NOT_FOUND         |
  // |  10  | ABORTED           |
  // |  13  | INTERNAL          |
  // ---
  // Troubleshooting
  //   The request process may not be completed when the response code is NOT `0 (OK)`.
  //
  // Here are some common reasons and how to resolve each error.
  //
  // | name              | common reason                                                                                   | how to resolve                                                                           |
  // | :---------------- | :---------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
  // | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server. | Check the code, especially around timeout and connection management, and fix if needed.  |
  // | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                         | Check request payload and fix request payload.                                           |
  // | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
  // | NOT_FOUND         | Requested ID is NOT inserted.                                                                   | Send a request with an ID that is already inserted.                                      |
  // | INTERNAL          | Target Vald cluster or network route has some critical error.                                   | Check target Vald cluster first and check network route including ingress as second.     |
  rpc StreamRemove(stream payload.v1.Remove.Request) returns (stream payload.v1.Object.StreamLocation) {}

  // Overview
  // MultiRemove is the method to remove multiple vectors in **1** request.
  //
  // <div class="notice">
  // gRPC has a message size limitation.<br>
  // Please be careful that the size of the request exceeds the limit.
  // </div>
  // ---
  // Status Code
  // |  0   | OK                |
  // |  1   | CANCELLED         |
  // |  3   | INVALID_ARGUMENT  |
  // |  4   | DEADLINE_EXCEEDED |
  // |  5   | NOT_FOUND         |
  // |  10  | ABORTED           |
  // |  13  | INTERNAL          |
  // ---
  // Troubleshooting
  // The request process may not be completed when the response code is NOT `0 (OK)`.
  //
  // Here are some common reasons and how to resolve each error.
  //
  // | name              | common reason                                                                                   | how to resolve                                                                           |
  // | :---------------- | :---------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
  // | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server. | Check the code, especially around timeout and connection management, and fix if needed.  |
  // | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                         | Check request payload and fix request payload.                                           |
  // | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
  // | NOT_FOUND         | Requested ID is NOT inserted.                                                                   | Send a request with an ID that is already inserted.                                      |
  // | INTERNAL          | Target Vald cluster or network route has some critical error.                                   | Check target Vald cluster first and check network route including ingress as second.     |
  rpc MultiRemove(payload.v1.Remove.MultiRequest) returns (payload.v1.Object.Locations) {
    option (google.api.http) = {
      post: "/remove/multiple"
      body: "*"
    };
  }
}
