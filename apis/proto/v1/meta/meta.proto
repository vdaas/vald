//
// Copyright (C) 2019-2021 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package meta.v1;

import "apis/proto/v1/payload/payload.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/gogo/googleapis/google/api/annotations.proto";

option go_package = "github.com/vdaas/vald/apis/grpc/v1/meta";
option java_multiple_files = true;
option java_package = "org.vdaas.vald.api.v1.meta";
option java_outer_classname = "ValdMeta";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_registration) = true;

option (gogoproto.messagename_all) = true;

service Meta {

  rpc GetMeta(payload.v1.Meta.Key) returns (payload.v1.Meta.Val) {
    option (google.api.http).post = "/meta";
  }
  rpc GetMetas(payload.v1.Meta.Keys) returns (payload.v1.Meta.Vals) {
    option (google.api.http).post = "/metas";
  }
  rpc GetMetaInverse(payload.v1.Meta.Val) returns (payload.v1.Meta.Key) {
    option (google.api.http).post = "/inverse/meta";
  }
  rpc GetMetasInverse(payload.v1.Meta.Vals) returns (payload.v1.Meta.Keys) {
    option (google.api.http).post = "/inverse/metas";
  }
  rpc SetMeta(payload.v1.Meta.KeyVal) returns (payload.v1.Empty) {
    option (google.api.http).post = "/meta";
  }
  rpc SetMetas(payload.v1.Meta.KeyVals) returns (payload.v1.Empty) {
    option (google.api.http).post = "/metas";
  }
  rpc DeleteMeta(payload.v1.Meta.Key) returns (payload.v1.Meta.Val) {
    option (google.api.http).delete = "/meta";
  }
  rpc DeleteMetas(payload.v1.Meta.Keys) returns (payload.v1.Meta.Vals) {
    option (google.api.http).delete = "/metas";
  }
  rpc DeleteMetaInverse(payload.v1.Meta.Val) returns (payload.v1.Meta.Key) {
    option (google.api.http).delete = "/inverse/meta";
  }
  rpc DeleteMetasInverse(payload.v1.Meta.Vals) returns (payload.v1.Meta.Keys) {
    option (google.api.http).delete = "/inverse/metas";
  }
}
