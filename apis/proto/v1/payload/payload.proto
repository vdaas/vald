//
// Copyright (C) 2019-2021 vdaas.org vald team <vald@vdaas.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package payload.v1;

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "github.com/googleapis/googleapis/google/rpc/status.proto";

option go_package = "github.com/vdaas/vald/apis/grpc/v1/payload";
option java_multiple_files = true;
option java_package = "org.vdaas.vald.api.v1.payload";
option java_outer_classname = "ValdPayload";

// Search related messages.
message Search {

  // Represents a search request.
  message Request {
    // vector.
    repeated float vector = 1 [ (validate.rules).repeated .min_items = 2 ];
    // search configuration.
    Config config = 2;
  }

  // Represents multiple search requests.
  message MultiRequest { repeated Request requests = 1; }

  // Represents a search request by ID.
  message IDRequest {
    // vector ID.
    string id = 1;
    // search configuration.
    Config config = 2;
  }

  // Represents multiple search requests by IDs.
  message MultiIDRequest { repeated IDRequest requests = 1; }

  // Represents a search request by binary object.
  message ObjectRequest {
    // binary object.
    bytes object = 1;
    // search configuration.
    Config config = 2;
    // filter configuration.
    Filter.Target vectorizer = 3;
  }

  // Represents multiple search requests by binary objects.
  message MultiObjectRequest { repeated ObjectRequest requests = 1; }

  // Represents search configuration.
  message Config {
    // unique request ID.
    string request_id = 1;
    // number of results.
    uint32 num = 2 [ (validate.rules).uint32.gte = 1 ];
    // search radius.
    float radius = 3;
    // search coefficient.
    float epsilon = 4;
    // timeout in nanoseconds.
    int64 timeout = 5;
    // ingress filter configurations.
    Filter.Config ingress_filters = 6;
    // egress filter configurations.
    Filter.Config egress_filters = 7;
  }

  // Represents a search response.
  message Response {
    // unique request ID.
    string request_id = 1;
    // search results.
    repeated Object.Distance results = 2;
  }

  // Represents multiple search responses.
  message Responses { repeated Response responses = 1; }

  // Represents stream response.
  message StreamResponse {
    oneof payload {
      // search response.
      Response response = 1;
      // error status.
      google.rpc.Status status = 2;
    }
  }
}

// Filter related messages.
message Filter {

  // Represents filter server.
  message Target {
    // hostname.
    string host = 1;
    // port.
    uint32 port = 2;
  }

  // Represents filter server configurations.
  message Config { repeated Target targets = 1; }
}

// Insert related messages.
message Insert {

  // Represents an insert request.
  message Request {
    // vector.
    Object.Vector vector = 1 [ (validate.rules).repeated .min_items = 2 ];
    // insert configurations.
    Config config = 2;
  }

  // Represents multiple insert requests.
  message MultiRequest { repeated Request requests = 1; }

  // Represents an insert request by binary object.
  message ObjectRequest {
    // binary object.
    Object.Blob object = 1;
    // insert configurations.
    Config config = 2;
    // filter configurations.
    Filter.Target vectorizer = 3;
  }

  // Represents multiple insert request by binary object.
  message MultiObjectRequest { repeated ObjectRequest requests = 1; }

  // Represents insert configurations.
  message Config {
    // If it is enabled, exist checking will be skipped during insert operation.
    bool skip_strict_exist_check = 1;
    // filter configurations.
    Filter.Config filters = 2;
    // timestamp.
    int64 timestamp = 3;
  }
}

message Update {
  message Request {
    Object.Vector vector = 1 [ (validate.rules).repeated .min_items = 2 ];
    Config config = 2;
  }
  message MultiRequest { repeated Request requests = 1; }
  message ObjectRequest {
    Object.Blob object = 1;
    Config config = 2;
    Filter.Target vectorizer = 3;
  }
  message MultiObjectRequest { repeated ObjectRequest requests = 1; }
  message Config {
    bool skip_strict_exist_check = 1;
    Filter.Config filters = 2;
    int64 timestamp = 3;
  }
}

message Upsert {
  message Request {
    Object.Vector vector = 1 [ (validate.rules).repeated .min_items = 2 ];
    Config config = 2;
  }
  message MultiRequest { repeated Request requests = 1; }
  message ObjectRequest {
    Object.Blob object = 1;
    Config config = 2;
    Filter.Target vectorizer = 3;
  }
  message MultiObjectRequest { repeated ObjectRequest requests = 1; }
  message Config {
    bool skip_strict_exist_check = 1;
    Filter.Config filters = 2;
    int64 timestamp = 3;
  }
}

message Remove {
  message Request {
    Object.ID id = 1;
    Config config = 2;
  }
  message MultiRequest { repeated Request requests = 1; }
  message Config {
    bool skip_strict_exist_check = 1;
    int64 timestamp = 3;
  }
}

// Common messages.
message Object {

  // Represents a request to fetch raw vector.
  message VectorRequest {
    // ID.
    ID id = 1 [ (validate.rules).repeated .min_items = 2 ];
    // filter configurations.
    Filter.Config filters = 2;
  }

  // Represents ID and distance pair.
  message Distance {
    // ID.
    string id = 1;
    // distance.
    float distance = 2;
  }

  // Represents stream response of distances.
  message StreamDistance {
    oneof payload {
      // distance.
      Distance distance = 1;
      // error status.
      google.rpc.Status status = 2;
    }
  }

  // Represents ID.
  message ID { string id = 1 [ (validate.rules).string.min_len = 1 ]; }

  //Represents IDs.
  message IDs { repeated string ids = 1; }

  // Represents a vector.
  message Vector {
    // ID.
    string id = 1 [ (validate.rules).string.min_len = 1 ];
    // vector.
    repeated float vector = 2 [ (validate.rules).repeated .min_items = 2 ];
  }

  // Represents multiple vectors.
  message Vectors { repeated Vector vectors = 1; }

  // Represents stream response of vectors.
  message StreamVector {
    oneof payload {
      // vectors.
      Vector vector = 1;
      // error status.
      google.rpc.Status status = 2;
    }
  }

  // Represents binary object.
  message Blob {
    // ID.
    string id = 1 [ (validate.rules).string.min_len = 1 ];
    // binary object.
    bytes object = 2;
  }

  // Represents stream response of binary objects.
  message StreamBlob {
    oneof payload {
      // binary object.
      Blob blob = 1;
      // error status.
      google.rpc.Status status = 2;
    }
  }

  // Represents a vector location.
  message Location {
    // name of the location.
    string name = 1;
    // UUID.
    string uuid = 2;
    // IP list.
    repeated string ips = 3;
  }

  // Represents stream response of locations.
  message StreamLocation {
    oneof payload {
      // location.
      Location location = 1;
      // error status.
      google.rpc.Status status = 2;
    }
  }

  // Represents multiple vector locations.
  message Locations { repeated Location locations = 1; }
}

message Meta {
  message Key { string key = 1; }
  message Keys { repeated string keys = 1; }
  message Val { string val = 1; }
  message Vals { repeated string vals = 1; }
  message KeyVal {
    string key = 1;
    string val = 2;
  }
  message KeyVals { repeated KeyVal kvs = 1; }
}

message Control {
  message CreateIndexRequest {
    uint32 pool_size = 1 [ (validate.rules).uint32.gte = 0 ];
  }
}

message Replication {
  message Recovery { repeated string deleted_agents = 1; }

  message Rebalance {
    repeated string high_usage_agents = 1;
    repeated string low_usage_agents = 2;
  }

  message Agents {
    repeated string agents = 1;
    repeated string removed_agents = 2;
    repeated string replicating_agent = 3;
  }
}

message Discoverer {
  message Request {
    string name = 1 [ (validate.rules).string.min_len = 1 ];
    string namespace = 2;
    string node = 3;
  }
}

message Backup {
  message GetVector {
    message Request { string uuid = 1 [ (validate.rules).string.min_len = 1 ]; }
    message Owner { string ip = 1 [ (validate.rules).string.min_len = 1 ]; }
  }

  message Locations {
    message Request { string uuid = 1 [ (validate.rules).string.min_len = 1 ]; }
  }

  message Remove {
    message Request { string uuid = 1 [ (validate.rules).string.min_len = 1 ]; }
    message RequestMulti {
      repeated string uuids = 1 [ (validate.rules).repeated .min_items = 1 ];
    }
  }

  message IP {
    message Register {
      message Request {
        string uuid = 1 [ (validate.rules).string.min_len = 1 ];
        repeated string ips = 2 [ (validate.rules).repeated .min_items = 1 ];
      }
    }
    message Remove {
      message Request {
        repeated string ips = 1 [ (validate.rules).repeated .min_items = 1 ];
      }
    }
  }

  message Vector {
    string uuid = 1;
    repeated float vector = 3 [ (validate.rules).repeated .min_items = 2 ];
    repeated string ips = 4;
  }
  message Vectors { repeated Vector vectors = 1; }

  message Compressed {
    message Vector {
      string uuid = 1;
      bytes vector = 3;
      repeated string ips = 4;
    }

    message Vectors { repeated Vector vectors = 1; }
  }
}

message Info {
  message Index {
    message Count {
      uint32 stored = 1;
      uint32 uncommitted = 2;
      bool indexing = 3;
      bool saving = 4;
    }
    message UUID {
      message Committed { string uuid = 1; }
      message Uncommitted { string uuid = 1; }
    }
  }

  message Pod {
    string app_name = 1;
    string name = 2;
    string namespace = 3;
    string ip = 4 [ (validate.rules).string.ipv4 = true ];
    CPU cpu = 5;
    Memory memory = 6;
    Node node = 7;
  }
  message Node {
    string name = 1;
    string internal_addr = 2;
    string external_addr = 3;
    CPU cpu = 4;
    Memory memory = 5;
    Pods Pods = 6;
  }
  message CPU {
    double limit = 1;
    double request = 2;
    double usage = 3;
  }
  message Memory {
    double limit = 1;
    double request = 2;
    double usage = 3;
  }
  message Pods {
    repeated Pod pods = 1 [ (validate.rules).repeated .min_items = 1 ];
  }
  message Nodes {
    repeated Node nodes = 1 [ (validate.rules).repeated .min_items = 1 ];
  }
  message IPs { repeated string ip = 1; }
}

message Empty {}
