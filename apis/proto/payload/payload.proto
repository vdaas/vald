//
// Copyright (C) 2019-2020 Vdaas.org Vald team ( kpango, rinx, kmrmt )
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package payload;

option go_package = "github.com/vdaas/vald/apis/grpc/payload";
option java_multiple_files = true;
option java_package = "org.vdaas.vald.payload";
option java_outer_classname = "ValdPayload";

import "validate/validate.proto";
/*
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
 */

message Search {
  message Request {
    repeated float vector = 1 [ (validate.rules).repeated .min_items = 2 ];
    Config config = 2;
  }

  message IDRequest {
    string id = 1;
    Config config = 2;
  }

  message ObjectRequest {
    bytes object = 1;
    Config config = 2;
  }

  message Config {
    uint32 num = 1 [ (validate.rules).uint32.gte = 1 ];
    float radius = 2;
    float epsilon = 3;
    int64 timeout = 4;
  }

  message Response { repeated Object.Distance results = 1; }
}

message Meta {
  message Key { string key = 1; }
  message Keys { repeated string keys = 1; }
  message Val { string val = 1; }
  message Vals { repeated string vals = 1; }
  message KeyVal {
    string key = 1;
    string val = 2;
  }
  message KeyVals { repeated KeyVal kvs = 1; }
}

message Object {
  message Distance {
    string id = 1;
    float distance = 2;
  }

  message ID { string id = 1 [ (validate.rules).string.min_len = 1 ]; }
  message IDs { repeated string ids = 1; }

  message Vector {
    string id = 1 [ (validate.rules).string.min_len = 1 ];
    repeated float vector = 2 [ (validate.rules).repeated .min_items = 2 ];
  }
  message Vectors { repeated Vector vectors = 1; }

  message Blob {
    string id = 1 [ (validate.rules).string.min_len = 1 ];
    bytes object = 2;
  }
}

message Control {
  message CreateIndexRequest {
    uint32 pool_size = 1 [ (validate.rules).uint32.gte = 0 ];
  }
}

message Replication {
  message Recovery {
    repeated string deleted_agents = 1;
  }

  message Rebalance {
    repeated string high_usage_agents = 1;
    repeated string low_usage_agents = 2;
  }

  message Agents {
    repeated string agents = 1;
    repeated string removed_agents = 2;
    repeated string replicating_agent = 3;
  }
}

message Discoverer {
  message Request {
    string name = 1 [ (validate.rules).string.min_len = 1 ];
    string namespace = 2;
    string node = 3;
  }
}

message Backup {
  message GetVector {
    message Request { string uuid = 1 [ (validate.rules).string.min_len = 1 ]; }
    message Owner { string ip = 1 [ (validate.rules).string.min_len = 1 ]; }
  }

  message Locations {
    message Request { string uuid = 1 [ (validate.rules).string.min_len = 1 ]; }
  }

  message Remove {
    message Request { string uuid = 1 [ (validate.rules).string.min_len = 1 ]; }
    message RequestMulti {
      repeated string uuids = 1 [ (validate.rules).repeated .min_items = 1 ];
    }
  }

  message IP {
    message Register {
      message Request {
        string uuid = 1 [ (validate.rules).string.min_len = 1 ];
        repeated string ips = 2 [ (validate.rules).repeated .min_items = 1 ];
      }
    }
    message Remove {
      message Request {
        repeated string ips = 1 [ (validate.rules).repeated .min_items = 1 ];
      }
    }
  }

  message MetaVector {
    string uuid = 1;
    string meta = 2;
    repeated float vector = 3 [ (validate.rules).repeated .min_items = 2 ];
    repeated string ips = 4;
  }
  message MetaVectors { repeated MetaVector vectors = 1; }

  message Compressed {
    message MetaVector {
      string uuid = 1;
      string meta = 2;
      bytes vector = 3;
      repeated string ips = 4;
    }

    message MetaVectors { repeated MetaVector vectors = 1; }
  }
}

message Info {
  message Index {
    message Count {
      uint32 stored = 1;
      uint32 uncommitted = 2;
      bool indexing = 3;
    }
    message UUID {
      message Committed {
        string uuid = 1;
      }
      message Uncommitted {
        string uuid = 1;
      }
    }
  }

  message Pod {
    string app_name = 1;
    string name = 2;
    string namespace = 3;
    string ip = 4 [ (validate.rules).string.ipv4 = true ];
    CPU cpu = 5;
    Memory memory = 6;
    Node node = 7;
  }
  message Node {
    string name = 1;
    string internal_addr = 2;
    string external_addr = 3;
    CPU cpu = 4;
    Memory memory = 5;
    Pods Pods = 6;
  }
  message CPU {
    double limit = 1;
    double request = 2;
    double usage = 3;
  }
  message Memory {
    double limit = 1;
    double request = 2;
    double usage = 3;
  }
  message Pods {
    repeated Pod pods = 1 [ (validate.rules).repeated .min_items = 1 ];
  }
  message Nodes {
    repeated Node nodes = 1 [ (validate.rules).repeated .min_items = 1 ];
  }
  message IPs { repeated string ip = 1; }
}

message Empty {}
