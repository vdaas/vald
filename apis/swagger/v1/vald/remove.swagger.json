{
  "swagger": "2.0",
  "info": {
    "title": "v1/vald/remove.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Remove"
    }
  ],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/remove": {
      "post": {
        "summary": "Overview\nRemove RPC is the method to remove a single vector.\n---\nStatus Code\n|  0   | OK                |\n|  1   | CANCELLED         |\n|  3   | INVALID_ARGUMENT  |\n|  4   | DEADLINE_EXCEEDED |\n|  5   | NOT_FOUND         |\n|  10  | ABORTED           |\n|  13  | INTERNAL          |\n---\nTroubleshooting\nThe request process may not be completed when the response code is NOT `0 (OK)`.",
        "description": "Here are some common reasons and how to resolve each error.\n\n| name              | common reason                                                                                   | how to resolve                                                                           |\n| :---------------- | :---------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |\n| CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server. | Check the code, especially around timeout and connection management, and fix if needed.  |\n| INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                         | Check request payload and fix request payload.                                           |\n| DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |\n| NOT_FOUND         | Requested ID is NOT inserted.                                                                   | Send a request with an ID that is already inserted.                                      |\n| INTERNAL          | Target Vald cluster or network route has some critical error.                                   | Check target Vald cluster first and check network route including ingress as second.     |",
        "operationId": "Remove_Remove",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ObjectLocation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Represent the remove request.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveRequest"
            }
          }
        ],
        "tags": ["Remove"]
      }
    },
    "/remove/multiple": {
      "post": {
        "summary": "Overview\nMultiRemove is the method to remove multiple vectors in **1** request.",
        "description": "\u003cdiv class=\"notice\"\u003e\ngRPC has a message size limitation.\u003cbr\u003e\nPlease be careful that the size of the request exceeds the limit.\n\u003c/div\u003e\n---\nStatus Code\n|  0   | OK                |\n|  1   | CANCELLED         |\n|  3   | INVALID_ARGUMENT  |\n|  4   | DEADLINE_EXCEEDED |\n|  5   | NOT_FOUND         |\n|  10  | ABORTED           |\n|  13  | INTERNAL          |\n---\nTroubleshooting\nThe request process may not be completed when the response code is NOT `0 (OK)`.\n\nHere are some common reasons and how to resolve each error.\n\n| name              | common reason                                                                                   | how to resolve                                                                           |\n| :---------------- | :---------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |\n| CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server. | Check the code, especially around timeout and connection management, and fix if needed.  |\n| INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                         | Check request payload and fix request payload.                                           |\n| DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |\n| NOT_FOUND         | Requested ID is NOT inserted.                                                                   | Send a request with an ID that is already inserted.                                      |\n| INTERNAL          | Target Vald cluster or network route has some critical error.                                   | Check target Vald cluster first and check network route including ingress as second.     |",
        "operationId": "Remove_MultiRemove",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ObjectLocations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Represent the multiple remove request.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveMultiRequest"
            }
          }
        ],
        "tags": ["Remove"]
      }
    },
    "/remove/timestamp": {
      "post": {
        "summary": "Overview\nRemoveByTimestamp RPC is the method to remove vectors based on timestamp.",
        "description": "\u003cdiv class=\"notice\"\u003e\nIn the TimestampRequest message, the 'timestamps' field is repeated, allowing the inclusion of multiple Timestamp.\u003cbr\u003e\nWhen multiple Timestamps are provided, it results in an `AND` condition, enabling the realization of deletions with specified ranges.\u003cbr\u003e\nThis design allows for versatile deletion operations, facilitating tasks such as removing data within a specific time range.\n\u003c/div\u003e\n---\nStatus Code\n|  0   | OK                |\n|  1   | CANCELLED         |\n|  4   | DEADLINE_EXCEEDED |\n|  5   | NOT_FOUND         |\n|  13  | INTERNAL          |\n---\nTroubleshooting\nThe request process may not be completed when the response code is NOT `0 (OK)`.\n\nHere are some common reasons and how to resolve each error.\n\n| name              | common reason                                                                                   | how to resolve                                                                                                       |\n| :---------------- | :---------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------- |\n| CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server. | Check the code, especially around timeout and connection management, and fix if needed.                              |\n| DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed.                             |\n| NOT_FOUND         | No vectors in the system match the specified timestamp conditions.                              | Check whether vectors matching the specified timestamp conditions exist in the system, and fix conditions if needed. |\n| INTERNAL          | Target Vald cluster or network route has some critical error.                                   | Check target Vald cluster first and check network route including ingress as second.",
        "operationId": "Remove_RemoveByTimestamp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ObjectLocations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Represent the remove request based on timestamp.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveTimestampRequest"
            }
          }
        ],
        "tags": ["Remove"]
      }
    }
  },
  "definitions": {
    "ObjectID": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "description": "Represent the vector ID."
    },
    "ObjectLocations": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ObjectLocation"
          }
        }
      },
      "description": "Represent multiple vector locations."
    },
    "ObjectStreamLocation": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/v1ObjectLocation",
          "description": "The vector location."
        },
        "status": {
          "$ref": "#/definitions/rpcStatus",
          "description": "The RPC error status."
        }
      },
      "description": "Represent the stream response of the vector location."
    },
    "TimestampOperator": {
      "type": "string",
      "enum": ["Eq", "Ne", "Ge", "Gt", "Le", "Lt"],
      "default": "Eq",
      "description": "Operator is enum of each conditional operator.\n\n - Eq: The timestamp is equal to the specified value in the request.\n - Ne: The timestamp is not equal to the specified value in the request.\n - Ge: The timestamp is greater than or equal to the specified value in the\nrequest.\n - Gt: The timestamp is greater than the specified value in the request.\n - Le: The timestamp is less than or equal to the specified value in the\nrequest.\n - Lt: The timestamp is less than the specified value in the request."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized\nby the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "v1ObjectLocation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the location."
        },
        "uuid": {
          "type": "string",
          "description": "The UUID of the vector."
        },
        "ips": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The IP list."
        }
      },
      "description": "Represent the vector location."
    },
    "v1RemoveConfig": {
      "type": "object",
      "properties": {
        "skipStrictExistCheck": {
          "type": "boolean",
          "description": "A flag to skip exist check during upsert operation."
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Remove timestamp."
        }
      },
      "description": "Represent the remove configuration."
    },
    "v1RemoveMultiRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RemoveRequest"
          },
          "description": "Represent the multiple remove request content."
        }
      },
      "description": "Represent the multiple remove request."
    },
    "v1RemoveRequest": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID",
          "description": "The object ID to be removed."
        },
        "config": {
          "$ref": "#/definitions/v1RemoveConfig",
          "description": "The configuration of the remove request."
        }
      },
      "description": "Represent the remove request."
    },
    "v1RemoveTimestamp": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp."
        },
        "operator": {
          "$ref": "#/definitions/TimestampOperator",
          "description": "The conditional operator."
        }
      },
      "description": "Represent the timestamp comparison."
    },
    "v1RemoveTimestampRequest": {
      "type": "object",
      "properties": {
        "timestamps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RemoveTimestamp"
          },
          "description": "The timestamp comparison list. If more than one is specified, the `AND`\nsearch is applied."
        }
      },
      "description": "Represent the remove request based on timestamp."
    }
  }
}
