# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import payload_pb2 as payload__pb2


class ValdStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Exists = channel.unary_unary(
        '/vald.Vald/Exists',
        request_serializer=payload__pb2.Object.ID.SerializeToString,
        response_deserializer=payload__pb2.Object.ID.FromString,
        )
    self.Search = channel.unary_unary(
        '/vald.Vald/Search',
        request_serializer=payload__pb2.Search.Request.SerializeToString,
        response_deserializer=payload__pb2.Search.Response.FromString,
        )
    self.SearchByID = channel.unary_unary(
        '/vald.Vald/SearchByID',
        request_serializer=payload__pb2.Search.IDRequest.SerializeToString,
        response_deserializer=payload__pb2.Search.Response.FromString,
        )
    self.StreamSearch = channel.stream_stream(
        '/vald.Vald/StreamSearch',
        request_serializer=payload__pb2.Search.Request.SerializeToString,
        response_deserializer=payload__pb2.Search.Response.FromString,
        )
    self.StreamSearchByID = channel.stream_stream(
        '/vald.Vald/StreamSearchByID',
        request_serializer=payload__pb2.Search.IDRequest.SerializeToString,
        response_deserializer=payload__pb2.Search.Response.FromString,
        )
    self.Insert = channel.unary_unary(
        '/vald.Vald/Insert',
        request_serializer=payload__pb2.Object.Vector.SerializeToString,
        response_deserializer=payload__pb2.Common.Error.FromString,
        )
    self.StreamInsert = channel.stream_stream(
        '/vald.Vald/StreamInsert',
        request_serializer=payload__pb2.Object.Vector.SerializeToString,
        response_deserializer=payload__pb2.Common.Error.FromString,
        )
    self.MultiInsert = channel.unary_unary(
        '/vald.Vald/MultiInsert',
        request_serializer=payload__pb2.Object.Vectors.SerializeToString,
        response_deserializer=payload__pb2.Common.Errors.FromString,
        )
    self.Update = channel.unary_unary(
        '/vald.Vald/Update',
        request_serializer=payload__pb2.Object.Vector.SerializeToString,
        response_deserializer=payload__pb2.Common.Error.FromString,
        )
    self.StreamUpdate = channel.stream_stream(
        '/vald.Vald/StreamUpdate',
        request_serializer=payload__pb2.Object.Vector.SerializeToString,
        response_deserializer=payload__pb2.Common.Error.FromString,
        )
    self.MultiUpdate = channel.unary_unary(
        '/vald.Vald/MultiUpdate',
        request_serializer=payload__pb2.Object.Vectors.SerializeToString,
        response_deserializer=payload__pb2.Common.Errors.FromString,
        )
    self.Remove = channel.unary_unary(
        '/vald.Vald/Remove',
        request_serializer=payload__pb2.Object.ID.SerializeToString,
        response_deserializer=payload__pb2.Common.Error.FromString,
        )
    self.StreamRemove = channel.stream_stream(
        '/vald.Vald/StreamRemove',
        request_serializer=payload__pb2.Object.ID.SerializeToString,
        response_deserializer=payload__pb2.Common.Error.FromString,
        )
    self.MultiRemove = channel.unary_unary(
        '/vald.Vald/MultiRemove',
        request_serializer=payload__pb2.Object.IDs.SerializeToString,
        response_deserializer=payload__pb2.Common.Errors.FromString,
        )
    self.GetObject = channel.unary_unary(
        '/vald.Vald/GetObject',
        request_serializer=payload__pb2.Object.ID.SerializeToString,
        response_deserializer=payload__pb2.Object.Vector.FromString,
        )
    self.StreamGetObject = channel.stream_stream(
        '/vald.Vald/StreamGetObject',
        request_serializer=payload__pb2.Object.ID.SerializeToString,
        response_deserializer=payload__pb2.Object.Vector.FromString,
        )


class ValdServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Exists(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Search(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SearchByID(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamSearch(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamSearchByID(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Insert(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamInsert(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MultiInsert(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamUpdate(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MultiUpdate(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Remove(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamRemove(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MultiRemove(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetObject(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamGetObject(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ValdServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Exists': grpc.unary_unary_rpc_method_handler(
          servicer.Exists,
          request_deserializer=payload__pb2.Object.ID.FromString,
          response_serializer=payload__pb2.Object.ID.SerializeToString,
      ),
      'Search': grpc.unary_unary_rpc_method_handler(
          servicer.Search,
          request_deserializer=payload__pb2.Search.Request.FromString,
          response_serializer=payload__pb2.Search.Response.SerializeToString,
      ),
      'SearchByID': grpc.unary_unary_rpc_method_handler(
          servicer.SearchByID,
          request_deserializer=payload__pb2.Search.IDRequest.FromString,
          response_serializer=payload__pb2.Search.Response.SerializeToString,
      ),
      'StreamSearch': grpc.stream_stream_rpc_method_handler(
          servicer.StreamSearch,
          request_deserializer=payload__pb2.Search.Request.FromString,
          response_serializer=payload__pb2.Search.Response.SerializeToString,
      ),
      'StreamSearchByID': grpc.stream_stream_rpc_method_handler(
          servicer.StreamSearchByID,
          request_deserializer=payload__pb2.Search.IDRequest.FromString,
          response_serializer=payload__pb2.Search.Response.SerializeToString,
      ),
      'Insert': grpc.unary_unary_rpc_method_handler(
          servicer.Insert,
          request_deserializer=payload__pb2.Object.Vector.FromString,
          response_serializer=payload__pb2.Common.Error.SerializeToString,
      ),
      'StreamInsert': grpc.stream_stream_rpc_method_handler(
          servicer.StreamInsert,
          request_deserializer=payload__pb2.Object.Vector.FromString,
          response_serializer=payload__pb2.Common.Error.SerializeToString,
      ),
      'MultiInsert': grpc.unary_unary_rpc_method_handler(
          servicer.MultiInsert,
          request_deserializer=payload__pb2.Object.Vectors.FromString,
          response_serializer=payload__pb2.Common.Errors.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=payload__pb2.Object.Vector.FromString,
          response_serializer=payload__pb2.Common.Error.SerializeToString,
      ),
      'StreamUpdate': grpc.stream_stream_rpc_method_handler(
          servicer.StreamUpdate,
          request_deserializer=payload__pb2.Object.Vector.FromString,
          response_serializer=payload__pb2.Common.Error.SerializeToString,
      ),
      'MultiUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.MultiUpdate,
          request_deserializer=payload__pb2.Object.Vectors.FromString,
          response_serializer=payload__pb2.Common.Errors.SerializeToString,
      ),
      'Remove': grpc.unary_unary_rpc_method_handler(
          servicer.Remove,
          request_deserializer=payload__pb2.Object.ID.FromString,
          response_serializer=payload__pb2.Common.Error.SerializeToString,
      ),
      'StreamRemove': grpc.stream_stream_rpc_method_handler(
          servicer.StreamRemove,
          request_deserializer=payload__pb2.Object.ID.FromString,
          response_serializer=payload__pb2.Common.Error.SerializeToString,
      ),
      'MultiRemove': grpc.unary_unary_rpc_method_handler(
          servicer.MultiRemove,
          request_deserializer=payload__pb2.Object.IDs.FromString,
          response_serializer=payload__pb2.Common.Errors.SerializeToString,
      ),
      'GetObject': grpc.unary_unary_rpc_method_handler(
          servicer.GetObject,
          request_deserializer=payload__pb2.Object.ID.FromString,
          response_serializer=payload__pb2.Object.Vector.SerializeToString,
      ),
      'StreamGetObject': grpc.stream_stream_rpc_method_handler(
          servicer.StreamGetObject,
          request_deserializer=payload__pb2.Object.ID.FromString,
          response_serializer=payload__pb2.Object.Vector.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'vald.Vald', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
