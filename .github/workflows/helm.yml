#
# Copyright (C) 2019-2023 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: "Update Helm charts"
on:
  push:
    tags:
      - "*.*.*"
      - "v*.*.*"
      - "*.*.*-*"
      - "v*.*.*-*"

jobs:
  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo $JSON
        env:
          JSON: ${{ toJSON(github) }}
      - name: Dump job context
        run: echo $JSON
        env:
          JSON: ${{ toJSON(job) }}
      - name: Dump steps context
        run: echo $JSON
        env:
          JSON: ${{ toJSON(steps) }}
      - name: Dump runner context
        run: echo $JSON
        env:
          JSON: ${{ toJSON(runner) }}
      - name: Dump strategy context
        run: echo $JSON
        env:
          JSON: ${{ toJSON(strategy) }}
      - name: Dump matrix context
        run: echo $JSON
        env:
          JSON: ${{ toJSON(matrix) }}
  update-k8s-manifest:
    name: Update k8s manifest
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/vdaas/vald/vald-ci-container:nightly
    steps:
      - name: Check out code.
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: set git config
        run: |
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Helm version
        run: |
          helm version
      - name: switch new branch
        id: switch_to_new_branch
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S_%3N)
          BRANCH_NAME="documentation/k8s-manifests/update_k8s_manifests_${TIMESTAMP}"
          git checkout main
          git checkout -b ${BRANCH_NAME}
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT
      - name: Update k8s-dir
        run: |
          make k8s/manifest/update
          make k8s/manifest/helm-operator/update
      - name: Run formatter and license.go
        run: |
          make format/yaml
          make license
      - name: Push to main
        continue-on-error: true
        run: |
          git add k8s
          git commit -S --signoff -m ":robot: Automatically update k8s manifests"

          git remote set-url origin "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git push -u origin ${BRANCH_NAME}

          curl --include --verbose --fail \
          -H "Accept: application/json" \
          -H "Content-Type:application/json" \
          -H "Authorization: token ${GITHUB_TOKEN}" \
          --request POST \
          --data "{\"title\": \"Update K8s manifests\", \"head\": \"${BRANCH_NAME}\", \"base\": \"main\", \"body\": \"K8s manifests are updated.\", \"maintainer_can_modify\": true}" \
          $API_URL
        env:
          GITHUB_USER: ${{ secrets.DISPATCH_USER }}
          GITHUB_TOKEN: ${{ secrets.DISPATCH_TOKEN }}
          API_URL: https://api.github.com/repos/vdaas/vald/pulls
          BRANCH_NAME: ${{ steps.switch_to_new_branch.outputs.BRANCH_NAME }}
  update-helm-chart:
    name: Update Helm chart
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/vdaas/vald/vald-ci-container:nightly
    steps:
      - name: Check out code.
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.DISPATCH_TOKEN }}
      - name: set git config
        run: |
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Helm version
        run: |
          helm version
      - name: Packaging
        run: |
          make helm/package/vald
          make helm/package/vald-helm-operator
      - name: Push to gh-pages
        run: |
          git checkout .
          git checkout gh-pages
          mv -f vald-*.tgz charts/
          helm repo index --url https://vald.vdaas.org/charts charts/

          git add charts
          git commit -S --signoff -m ":robot: Automatically update Helm charts"

          git remote set-url origin "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git push origin gh-pages
        env:
          GITHUB_USER: ${{ secrets.DISPATCH_USER }}
          GITHUB_TOKEN: ${{ secrets.DISPATCH_TOKEN }}
  crud-on-remote-helm-chart:
    name: CRUD test on remote Helm chart
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - name: set git config
        run: |
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - name: Wait for Docker images
        id: wait_for_docker_images
        uses: ./.github/actions/wait-for-docker-image
      - name: Specify container versions
        id: specify_container_versions
        uses: ./.github/actions/detect-docker-image-tags
        with:
          tag_name: ${{ github.ref_name }}
      - name: Fetch Helm version
        run: |
          HELM_VERSION=`make version/helm`
          echo "helm=${HELM_VERSION}" >> $GITHUB_OUTPUT
        id: version
      - uses: rinx/setup-k3d@v0.0.4
        with:
          version: latest
          name: vald
          agents: 3
      - name: check k3d
        run: |
          kubectl cluster-info
      - uses: azure/setup-helm@v3
        with:
          version: ${{ steps.version.outputs.helm }}
      - name: Helm version
        run: |
          helm version
      - name: deploy Vald
        id: deploy_vald
        uses: ./.github/actions/e2e-deploy-vald
        with:
          require_libhdf5: "true"
          helm_extra_options: ${{ steps.specify_container_versions.outputs.HELM_EXTRA_OPTIONS }}
          values: .github/helm/values/values-lb.yaml
          wait_for_selector: app=vald-lb-gateway
          use_local_charts: false
      - name: Fetch golang version
        run: |
          GO_VERSION=`make version/go`
          echo "version=${GO_VERSION}" >> $GITHUB_OUTPUT
        id: golang_version
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.golang_version.outputs.version }}
      - name: run E2E CRUD
        run: |
          make hack/benchmark/assets/dataset/${DATASET}
          go version
          go test \
            -race \
            -mod=readonly \
            -v tests/e2e/crud/crud_test.go \
            -tags "e2e" \
            -timeout 30m \
            -run "TestE2EStandardCRUD" \
            -host=localhost \
            -port=8081 \
            -dataset=`pwd`/hack/benchmark/assets/dataset/${DATASET} \
            -insert-num=60000 \
            -search-num=10000 \
            -search-by-id-num=10000 \
            -get-object-num=100 \
            -update-num=100 \
            -upsert-num=100 \
            -remove-num=100 \
            -wait-after-insert=3m \
            -portforward \
            -portforward-pod-name=${POD_NAME} \
            -portforward-pod-port=8081 \
            -kubeconfig=${KUBECONFIG} \
            -namespace=default
        env:
          DATASET: fashion-mnist-784-euclidean.hdf5
          POD_NAME: ${{ steps.deploy_vald.outputs.POD_NAME }}
