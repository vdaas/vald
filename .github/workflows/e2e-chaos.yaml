#
# Copyright (C) 2019-2021 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: "Run E2E chaos test"
on:
  push:
    tags:
      - "*.*.*"
      - "v*.*.*"
      - "*.*.*-*"
      - "v*.*.*-*"
  pull_request:
    types:
      - "labeled"

jobs:
  agent-failure:
    name: "E2E chaos test (Agent failure: to test insert/search works even if one of the agents is failing)"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: startsWith( github.ref, 'refs/tags/') || github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-chaos'
    steps:
      - uses: actions/checkout@v2
      - name: Wait for Docker images
        if: startsWith( github.ref, 'refs/tags/')
        id: wait_for_docker_images
        uses: ./.github/actions/wait-for-docker-image
        with:
          images: "vdaas/vald-agent-ngt \
            vdaas/vald-discoverer-k8s \
            vdaas/vald-manager-compressor \
            vdaas/vald-meta-cassandra \
            vdaas/vald-manager-backup-cassandra \
            vdaas/vald-backup-gateway \
            vdaas/vald-lb-gateway \
            vdaas/vald-meta-gateway \
            vdaas/vald-manager-index"
      - name: Get PR number
        id: get_pr_number
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        run: |
          pr_num=`cat $GITHUB_EVENT_PATH | jq -r ".number"`
          echo "::set-output name=PR_NUM::${pr_num}"
      - name: Specify container versions
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        id: specify_container_versions
        uses: ./.github/actions/detect-docker-image-tags
        with:
          tag_name: pr-${{ steps.get_pr_number.outputs.PR_NUM }}
          images: "vdaas/vald-agent-ngt \
            vdaas/vald-discoverer-k8s \
            vdaas/vald-manager-compressor \
            vdaas/vald-meta-cassandra \
            vdaas/vald-manager-backup-cassandra \
            vdaas/vald-backup-gateway \
            vdaas/vald-lb-gateway \
            vdaas/vald-meta-gateway \
            vdaas/vald-manager-index"
      - name: Fetch Helm version
        run: |
          HELM_VERSION=`make version/helm`
          echo "::set-output name=helm::${HELM_VERSION}"
        id: version
      - uses: rinx/setup-k3d@v0.0.2
        with:
          version: latest
          name: vald
          agents: 3
      - name: check k3d
        run: |
          kubectl cluster-info
      - uses: azure/setup-helm@v1
        with:
          version: ${{ steps.version.outputs.helm }}
      - name: Helm version
        run: |
          helm version
      - name: deploy Vald
        id: deploy_vald
        uses: ./.github/actions/e2e-deploy-vald
        with:
          require_libhdf5: "true"
          require_scylla: "true"
          helm_extra_options: ${{ steps.specify_container_versions.outputs.HELM_EXTRA_OPTIONS }}
          values: .github/helm/values/values-chaos.yaml
          wait_for_selector: app=vald-meta-gateway
      - name: deploy Chaos Mesh
        run: |
          curl -sSL https://mirrors.chaos-mesh.org/v1.2.1/install.sh | bash -s -- --k3s
          helm install \
            --set podChaos.failure.enabled=true \
            vald-chaos-test tests/chaos/chart
      - name: run Insert and Search jobs
        run: |
          make hack/benchmark/assets/dataset/${DATASET}
          go test \
            -v tests/e2e/crud/crud_test.go \
            -tags "e2e" \
            -run "TestE2EInsertAndSearch" \
            -timeout 15m \
            -host=localhost \
            -port=8081 \
            -dataset=`pwd`/hack/benchmark/assets/dataset/${DATASET} \
            -insert-num=10000 \
            -search-num=10000 \
            -wait-after-insert=2m \
            -portforward \
            -portforward-pod-name=${POD_NAME} \
            -portforward-pod-port=8081 \
            -kubeconfig=${KUBECONFIG} \
            -namespace=default
        env:
          DATASET: fashion-mnist-784-euclidean.hdf5
          POD_NAME: ${{ steps.deploy_vald.outputs.POD_NAME }}
  random-pod-failure:
    name: "E2E chaos test (random Pod failure: to test redundancy)"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: startsWith( github.ref, 'refs/tags/') || github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-chaos'
    steps:
      - uses: actions/checkout@v2
      - name: Wait for Docker images
        if: startsWith( github.ref, 'refs/tags/')
        id: wait_for_docker_images
        uses: ./.github/actions/wait-for-docker-image
        with:
          images: "vdaas/vald-agent-ngt \
            vdaas/vald-discoverer-k8s \
            vdaas/vald-manager-compressor \
            vdaas/vald-meta-cassandra \
            vdaas/vald-manager-backup-cassandra \
            vdaas/vald-backup-gateway \
            vdaas/vald-lb-gateway \
            vdaas/vald-meta-gateway \
            vdaas/vald-manager-index"
      - name: Get PR number
        id: get_pr_number
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        run: |
          pr_num=`cat $GITHUB_EVENT_PATH | jq -r ".number"`
          echo "::set-output name=PR_NUM::${pr_num}"
      - name: Specify container versions
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        id: specify_container_versions
        uses: ./.github/actions/detect-docker-image-tags
        with:
          tag_name: pr-${{ steps.get_pr_number.outputs.PR_NUM }}
          images: "vdaas/vald-agent-ngt \
            vdaas/vald-discoverer-k8s \
            vdaas/vald-manager-compressor \
            vdaas/vald-meta-cassandra \
            vdaas/vald-manager-backup-cassandra \
            vdaas/vald-backup-gateway \
            vdaas/vald-lb-gateway \
            vdaas/vald-meta-gateway \
            vdaas/vald-manager-index"
      - name: Fetch Helm version
        run: |
          HELM_VERSION=`make version/helm`
          echo "::set-output name=helm::${HELM_VERSION}"
        id: version
      - uses: rinx/setup-k3d@v0.0.2
        with:
          version: latest
          name: vald
          agents: 3
      - name: check k3d
        run: |
          kubectl cluster-info
      - uses: azure/setup-helm@v1
        with:
          version: ${{ steps.version.outputs.helm }}
      - name: Helm version
        run: |
          helm version
      - name: deploy Vald
        id: deploy_vald
        uses: ./.github/actions/e2e-deploy-vald
        with:
          require_libhdf5: "true"
          require_scylla: "true"
          helm_extra_options: ${{ steps.specify_container_versions.outputs.HELM_EXTRA_OPTIONS }}
          values: .github/helm/values/values-chaos.yaml
          wait_for_selector: app=vald-meta-gateway
      - name: deploy Chaos Mesh
        run: |
          curl -sSL https://mirrors.chaos-mesh.org/v1.2.1/install.sh | bash -s -- --k3s
          helm install \
            --set podChaos.failure.enabled=true \
            --set podChaos.failure.selector.labelSelectors."app\.kubernetes\.io/component"=null \
            vald-chaos-test tests/chaos/chart
      - name: run Insert and Search jobs
        run: |
          make hack/benchmark/assets/dataset/${DATASET}
          podname=`kubectl get pods --selector=app=vald-meta-gateway | tail -1 | awk '{print $1}'`
          go test \
            -v tests/e2e/crud/crud_test.go \
            -tags "e2e" \
            -run "TestE2EInsertAndSearch" \
            -timeout 15m \
            -host=localhost \
            -port=8081 \
            -dataset=`pwd`/hack/benchmark/assets/dataset/${DATASET} \
            -insert-num=10000 \
            -search-num=10000 \
            -wait-after-insert=2m \
            -portforward \
            -portforward-pod-name=${podname} \
            -portforward-pod-port=8081 \
            -kubeconfig=${KUBECONFIG} \
            -namespace=default
        env:
          DATASET: fashion-mnist-784-euclidean.hdf5
  meta-network-partition:
    name: "E2E chaos test (meta network partition: to test retries of meta insert/fetch)"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: startsWith( github.ref, 'refs/tags/') || github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-chaos'
    steps:
      - uses: actions/checkout@v2
      - name: Wait for Docker images
        if: startsWith( github.ref, 'refs/tags/')
        id: wait_for_docker_images
        uses: ./.github/actions/wait-for-docker-image
        with:
          images: "vdaas/vald-agent-ngt \
            vdaas/vald-discoverer-k8s \
            vdaas/vald-manager-compressor \
            vdaas/vald-meta-cassandra \
            vdaas/vald-manager-backup-cassandra \
            vdaas/vald-backup-gateway \
            vdaas/vald-lb-gateway \
            vdaas/vald-meta-gateway \
            vdaas/vald-manager-index"
      - name: Get PR number
        id: get_pr_number
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        run: |
          pr_num=`cat $GITHUB_EVENT_PATH | jq -r ".number"`
          echo "::set-output name=PR_NUM::${pr_num}"
      - name: Specify container versions
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        id: specify_container_versions
        uses: ./.github/actions/detect-docker-image-tags
        with:
          tag_name: pr-${{ steps.get_pr_number.outputs.PR_NUM }}
          images: "vdaas/vald-agent-ngt \
            vdaas/vald-discoverer-k8s \
            vdaas/vald-manager-compressor \
            vdaas/vald-meta-cassandra \
            vdaas/vald-manager-backup-cassandra \
            vdaas/vald-backup-gateway \
            vdaas/vald-lb-gateway \
            vdaas/vald-meta-gateway \
            vdaas/vald-manager-index"
      - name: Fetch Helm version
        run: |
          HELM_VERSION=`make version/helm`
          echo "::set-output name=helm::${HELM_VERSION}"
        id: version
      - uses: rinx/setup-k3d@v0.0.2
        with:
          version: latest
          name: vald
          agents: 3
      - name: check k3d
        run: |
          kubectl cluster-info
      - uses: azure/setup-helm@v1
        with:
          version: ${{ steps.version.outputs.helm }}
      - name: Helm version
        run: |
          helm version
      - name: deploy Vald
        id: deploy_vald
        uses: ./.github/actions/e2e-deploy-vald
        with:
          require_libhdf5: "true"
          require_scylla: "true"
          helm_extra_options: ${{ steps.specify_container_versions.outputs.HELM_EXTRA_OPTIONS }}
          values: .github/helm/values/values-chaos.yaml
          wait_for_selector: app=vald-meta-gateway
      - name: deploy Chaos Mesh
        run: |
          curl -sSL https://mirrors.chaos-mesh.org/v1.2.1/install.sh | bash -s -- --k3s
          helm install \
            --set networkChaos.partition.enabled=true \
            vald-chaos-test tests/chaos/chart
      - name: run Insert and Search jobs
        run: |
          make hack/benchmark/assets/dataset/${DATASET}
          go test \
            -v tests/e2e/crud/crud_test.go \
            -tags "e2e" \
            -run "TestE2EInsertAndSearch" \
            -timeout 15m \
            -host=localhost \
            -port=8081 \
            -dataset=`pwd`/hack/benchmark/assets/dataset/${DATASET} \
            -insert-num=10000 \
            -search-num=10000 \
            -wait-after-insert=2m \
            -portforward \
            -portforward-pod-name=${POD_NAME} \
            -portforward-pod-port=8081 \
            -kubeconfig=${KUBECONFIG} \
            -namespace=default
        env:
          DATASET: fashion-mnist-784-euclidean.hdf5
          POD_NAME: ${{ steps.deploy_vald.outputs.POD_NAME }}
  clusterwide-network-bandwidth:
    name: "E2E chaos test (network bandwidth: to test it works properly under bandwidth limitation)"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: startsWith( github.ref, 'refs/tags/') || github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-chaos'
    steps:
      - uses: actions/checkout@v2
      - name: Wait for Docker images
        if: startsWith( github.ref, 'refs/tags/')
        id: wait_for_docker_images
        uses: ./.github/actions/wait-for-docker-image
        with:
          images: "vdaas/vald-agent-ngt \
            vdaas/vald-discoverer-k8s \
            vdaas/vald-lb-gateway \
            vdaas/vald-manager-index"
      - name: Get PR number
        id: get_pr_number
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        run: |
          pr_num=`cat $GITHUB_EVENT_PATH | jq -r ".number"`
          echo "::set-output name=PR_NUM::${pr_num}"
      - name: Specify container versions
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        id: specify_container_versions
        uses: ./.github/actions/detect-docker-image-tags
        with:
          tag_name: pr-${{ steps.get_pr_number.outputs.PR_NUM }}
          images: "vdaas/vald-agent-ngt \
            vdaas/vald-discoverer-k8s \
            vdaas/vald-lb-gateway \
            vdaas/vald-manager-index"
      - name: Fetch Helm version
        run: |
          HELM_VERSION=`make version/helm`
          echo "::set-output name=helm::${HELM_VERSION}"
        id: version
      - uses: rinx/setup-k3d@v0.0.2
        with:
          version: latest
          name: vald
          agents: 3
      - name: check k3d
        run: |
          kubectl cluster-info
      - uses: azure/setup-helm@v1
        with:
          version: ${{ steps.version.outputs.helm }}
      - name: Helm version
        run: |
          helm version
      - name: deploy Vald
        id: deploy_vald
        uses: ./.github/actions/e2e-deploy-vald
        with:
          require_libhdf5: "true"
          helm_extra_options: ${{ steps.specify_container_versions.outputs.HELM_EXTRA_OPTIONS }}
          values: .github/helm/values/values-lb.yaml
          wait_for_selector: app=vald-lb-gateway
      - name: deploy Chaos Mesh
        run: |
          curl -sSL https://mirrors.chaos-mesh.org/v1.2.1/install.sh | bash -s -- --k3s
          helm install \
            --set networkChaos.bandwidth.enabled=true \
            vald-chaos-test tests/chaos/chart
      - name: run Insert jobs
        run: |
          make hack/benchmark/assets/dataset/${DATASET}
          go test \
            -v tests/e2e/crud/crud_test.go \
            -tags "e2e" \
            -run "TestE2EInsertOnly" \
            -timeout 15m \
            -host=localhost \
            -port=8081 \
            -dataset=`pwd`/hack/benchmark/assets/dataset/${DATASET} \
            -insert-num=10000 \
            -wait-after-insert=2m \
            -portforward \
            -portforward-pod-name=${POD_NAME} \
            -portforward-pod-port=8081 \
            -kubeconfig=${KUBECONFIG} \
            -namespace=default
        env:
          DATASET: fashion-mnist-784-euclidean.hdf5
          POD_NAME: ${{ steps.deploy_vald.outputs.POD_NAME }}
      - name: run Search jobs
        run: |
          make hack/benchmark/assets/dataset/${DATASET}
          go test \
            -v tests/e2e/crud/crud_test.go \
            -tags "e2e" \
            -run "TestE2ESearchOnly" \
            -timeout 15m \
            -host=localhost \
            -port=8081 \
            -dataset=`pwd`/hack/benchmark/assets/dataset/${DATASET} \
            -search-num=10000 \
            -portforward \
            -portforward-pod-name=${POD_NAME} \
            -portforward-pod-port=8081 \
            -kubeconfig=${KUBECONFIG} \
            -namespace=default
        env:
          DATASET: fashion-mnist-784-euclidean.hdf5
          POD_NAME: ${{ steps.deploy_vald.outputs.POD_NAME }}
  slack-notification:
    name: "Slack notification"
    needs:
      - agent-failure
      - random-pod-failure
      - meta-network-partition
      - clusterwide-network-bandwidth
    runs-on: ubuntu-latest
    if: startsWith( github.ref, 'refs/tags/')
    steps:
      - uses: technote-space/workflow-conclusion-action@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: 8398a7/action-slack@v2
        with:
          author_name: "E2E chaos test"
          status: ${{ env.WORKFLOW_CONCLUSION }}
          only_mention_fail: channel
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_WEBHOOK_URL }}
