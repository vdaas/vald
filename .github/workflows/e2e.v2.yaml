#
# Copyright (C) 2019-2025 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: "Run E2E V2"
on:
  push:
    tags:
      - "*.*.*"
      - "v*.*.*"
      - "*.*.*-*"
      - "v*.*.*-*"
  pull_request:
    types:
      - "labeled"
  workflow_dispatch:
env:
  DATASET: fashion-mnist-784-euclidean.hdf5
jobs:
  dump-contexts-to-log:
    timeout-minutes: 30
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: ./.github/actions/dump-context
  detect-ci-container:
    permissions:
      contents: read
    if: startsWith(github.ref, 'refs/tags/') || (github.event.action == 'labeled' && startsWith(github.event.label.name,'actions/e2e-v2')) || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/_detect-ci-container.yaml
  generate-matrix:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Set Matrix
        id: set_matrix
        shell: bash
        run: |
          # Define base matrix combinations
          BASE_MATRIX='{
            "scenario": ["stream_crud", "unary_crud", "multi_crud", "rollout"],
            "deployment": ["helm-chart"],
            "cluster": ["k3d"],
            "environment": ["null"],
            "include": [
              {"scenario": "stream_crud", "deployment": "helm-operator", "cluster": "k3d", "environment": "null"},
              {"scenario": "index_correction", "deployment": "helm-chart", "cluster": "k3d", "environment": "management"},
              {"scenario": "stream_crud", "deployment": "helm-chart", "cluster": "k3d", "environment": "management"},
              {"scenario": "stream_crud", "deployment": "helm-chart", "cluster": "k3d", "environment": "mirror"},
              {"scenario": "stream_crud", "deployment": "helm-chart", "cluster": "k3d", "environment": "profile"},
              {"scenario": "stream_crud", "deployment": "helm-chart", "cluster": "k3d", "environment": "failure"},
              {"scenario": "stream_crud", "deployment": "helm-chart", "cluster": "k3d", "environment": "kill"},
              {"scenario": "stream_crud", "deployment": "helm-chart", "cluster": "k3d", "environment": "partition"},
              {"scenario": "stream_crud", "deployment": "helm-chart", "cluster": "k3d", "environment": "bandwidth"}
            ]
          }'

          # Check if this is a labeled event with a suffix
          if [[ "${{ github.event.action }}" == "labeled" && \
                "${{ github.event.label.name }}" != "actions/e2e-v2" && \
                "${{ github.event.label.name }}" == *"actions/e2e-v2-"* ]]; then

            # Extract suffix from label
            SUFFIX="${GITHUB_EVENT_LABEL_NAME#actions/e2e-v2-}"
            SUFFIX="$(echo "${{ github.event.label.name }}" | sed 's|actions/e2e-v2-||')"
            echo "Filtering matrix by suffix: $SUFFIX"

            # Generate a filtered matrix
            FILTERED_MATRIX="$(echo "$BASE_MATRIX" | jq -c ".")"

            # Create arrays for each dimension of the matrix
            SCENARIOS=($(echo "$BASE_MATRIX" | jq -r '.scenario[]'))
            DEPLOYMENTS=($(echo "$BASE_MATRIX" | jq -r '.deployment[]'))
            CLUSTERS=($(echo "$BASE_MATRIX" | jq -r '.cluster[]'))
            ENVIRONMENTS=($(echo "$BASE_MATRIX" | jq -r '.environment[]'))

            # Process base matrix dimensions
            FILTERED_SCENARIOS=()
            for SCENARIO in "${SCENARIOS[@]}"; do
              for DEPLOYMENT in "${DEPLOYMENTS[@]}"; do
                for CLUSTER in "${CLUSTERS[@]}"; do
                  for ENVIRONMENT in "${ENVIRONMENTS[@]}"; do
                    COMBO="${SCENARIO}-${DEPLOYMENT}-${CLUSTER}-${ENVIRONMENT}"
                    if [[ "$COMBO" == *"$SUFFIX"* ]]; then
                      if [[ ! " ${FILTERED_SCENARIOS[@]} " =~ " ${SCENARIO} " ]]; then
                        FILTERED_SCENARIOS+=("$SCENARIO")
                      fi
                    fi
                  done
                done
              done
            done

            # Process includes
            INCLUDES=$(echo "$BASE_MATRIX" | jq -c '.include[]')
            FILTERED_INCLUDES=[]
            while read -r INCLUDE; do
              SCENARIO=$(echo "$INCLUDE" | jq -r '.scenario')
              DEPLOYMENT=$(echo "$INCLUDE" | jq -r '.deployment')
              CLUSTER=$(echo "$INCLUDE" | jq -r '.cluster')
              ENVIRONMENT=$(echo "$INCLUDE" | jq -r '.environment')

              COMBO="${SCENARIO}-${DEPLOYMENT}-${CLUSTER}-${ENVIRONMENT}"
              if [[ "$COMBO" == *"$SUFFIX"* ]]; then
                if [[ "$FILTERED_INCLUDES" == "[]" ]]; then
                  FILTERED_INCLUDES="[$INCLUDE]"
                else
                  FILTERED_INCLUDES="$(echo "$FILTERED_INCLUDES" | jq -c ". + [$INCLUDE]")"
                fi
              fi
            done <<< "$INCLUDES"

            # If we have filtered scenarios, create a filtered matrix
            if [[ ${#FILTERED_SCENARIOS[@]} -gt 0 || "$FILTERED_INCLUDES" != "[]" ]]; then
              FILTERED_MATRIX="{"

              if [[ ${#FILTERED_SCENARIOS[@]} -gt 0 ]]; then
                FILTERED_MATRIX="$FILTERED_MATRIX\"scenario\":[$(printf '"%s",' "${FILTERED_SCENARIOS[@]}" | sed 's/,$//')],"
                FILTERED_MATRIX="$FILTERED_MATRIX\"deployment\":[$(printf '"%s",' "${DEPLOYMENTS[@]}" | sed 's/,$//')],"
                FILTERED_MATRIX="$FILTERED_MATRIX\"cluster\":[$(printf '"%s",' "${CLUSTERS[@]}" | sed 's/,$//')],"
                FILTERED_MATRIX="$FILTERED_MATRIX\"environment\":[$(printf '"%s",' "${ENVIRONMENTS[@]}" | sed 's/,$//')],"
              fi

              if [[ "$FILTERED_INCLUDES" != "[]" ]]; then
                FILTERED_MATRIX="$FILTERED_MATRIX\"include\":$FILTERED_INCLUDES"
              else
                # Remove trailing comma if no includes
                FILTERED_MATRIX="$(echo "$FILTERED_MATRIX" | sed 's/,$//')"
              fi

              FILTERED_MATRIX="$FILTERED_MATRIX}"
              echo "Generated filtered matrix: $FILTERED_MATRIX"
              echo "matrix=$FILTERED_MATRIX" >> "$GITHUB_OUTPUT"
            else
              echo "No matrix elements match the suffix '$SUFFIX'. Using base matrix."
              echo "matrix=$BASE_MATRIX" >> "$GITHUB_OUTPUT"
            fi
          else
            # No filtering needed, use base matrix
            echo "Using base matrix (no suffix filtering)"
            echo "matrix=$BASE_MATRIX" >> "$GITHUB_OUTPUT"
          fi
  e2e:
    timeout-minutes: 60
    permissions:
      contents: read
    needs: [detect-ci-container, generate-matrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
            # TODO: Fix the issue the readreplica returns 0 indices
            # - scenario: readreplica
            #   deployment: helm-chart
            #   cluster: kind
            #   environment: "null"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/vdaas/vald/vald-ci-container:${{ needs.detect-ci-container.outputs.TAG }}
      credentials:
        username: ${{ secrets.PACKAGE_USER }}
        password: ${{ secrets.PACKAGE_TOKEN }}
      options: "--add-host host.docker.internal:host-gateway"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Set Git config
        run: |
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - name: Setup E2E environment
        id: setup_e2e
        uses: ./.github/actions/setup-e2e
        with:
          require_k3d: ${{ matrix.cluster == 'k3d' }}
          require_kind: ${{ matrix.cluster == 'kind' }}
          require_k0s: ${{ matrix.cluster == 'k0s' }}
      - name: Set HELM_EXTRA_OPTIONS for index management jobs
        if: ${{ matrix.environment == 'management' }}
        run: |
          echo "HELM_EXTRA_OPTIONS=\"--values .github/helm/values/values-index-management-jobs.yaml\"" >> $GITHUB_ENV
      - name: Deploy Vald by Helm Chart
        if: ${{ matrix.deployment == 'helm-chart' && matrix.environment != 'mirror' && matrix.scenario != 'readreplica' }}
        uses: ./.github/actions/e2e-deploy-vald
        with:
          helm_extra_options: "${{ steps.setup_e2e.outputs.HELM_EXTRA_OPTIONS }}"
          values: .github/helm/values/values-${{ 'profile' == matrix.environment && matrix.environment || 'lb' }}.yaml
          wait_for_selector: "app=vald-lb-gateway"
      - name: Deploy Vald Read Replica
        if: ${{ 'readreplica' == matrix.scenario }}
        id: deploy_vald_readreplica
        uses: ./.github/actions/e2e-deploy-vald-readreplica
        with:
          helm_extra_options: ${{ steps.setup_e2e.outputs.HELM_EXTRA_OPTIONS }}
          values: .github/helm/values/values-readreplica.yaml
          wait_for_selector: app=vald-lb-gateway
      - name: Deploy Vald-01
        if: ${{ matrix.environment == 'mirror' }}
        uses: ./.github/actions/e2e-deploy-vald
        with:
          namespace: vald-01
          helm_extra_options: "${{ steps.setup_e2e.outputs.HELM_EXTRA_OPTIONS }}"
          values: .github/helm/values/values-mirror-01.yaml
          wait_for_selector: app=vald-mirror-gateway
      - name: Deploy Vald-02
        if: ${{ matrix.environment == 'mirror' }}
        uses: ./.github/actions/e2e-deploy-vald
        with:
          namespace: vald-02
          helm_extra_options: "${{ steps.setup_e2e.outputs.HELM_EXTRA_OPTIONS }}"
          values: .github/helm/values/values-mirror-02.yaml
          wait_for_selector: app=vald-mirror-gateway
      - name: Deploy Mirror Target
        if: ${{ matrix.environment == 'mirror' }}
        run: |
          kubectl apply -f .github/helm/values/vald-mirror-target.yaml -n vald-01
          sleep 5s
          kubectl get pods -A && kubectl get vmt -o wide -A

      - name: Create Helm options for vald-helm-operator
        if: ${{ matrix.deployment == 'helm-operator' }}
        uses: ./.github/actions/setup-e2e
        id: vald_helm_operator
        with:
          target_images: "vdaas/vald-helm-operator"
          require_libhdf5: false
          require_go: false
          require_helm: false
          require_k3d: false
          require_kind: false
          require_k0s: false
      - name: Merge Docker image tag
        if: ${{ matrix.deployment == 'helm-operator' }}
        shell: bash
        run: |
          IMAGE_TAGS=(${{ steps.setup_e2e.outputs.IMAGE_TAGS }})

          for IMAGE_TAG in "${IMAGE_TAGS[@]}"
          do
            echo "IMAGE_TAG:${IMAGE_TAG}"

            ARR=(${IMAGE_TAG//=/ })
            FIELD=${ARR[0]}
            TAG="\"${ARR[1]}\""
            yq e ".spec.$FIELD=$TAG" -i ./.github/valdrelease/valdrelease.yaml
          done
      - name: Deploy Vald using Vald Helm Operator
        if: ${{ matrix.deployment == 'helm-operator' }}
        uses: ./.github/actions/e2e-deploy-vald-helm-operator
        with:
          helm_extra_options: "${{ steps.vald_helm_operator.outputs.HELM_EXTRA_OPTIONS }}"
          valdrelease: ./.github/valdrelease/valdrelease.yaml
          wait_for_selector: app=vald-lb-gateway

      - name: Deploy Chaos Mesh
        if: ${{ contains(fromJson('["failure","kill","partition","bandwidth"]'), matrix.environment) }}
        uses: ./.github/actions/deploy-chaos-mesh
        with:
          helm_extra_options: "--set networkChaos.${{ matrix.environment }}.enabled=true"

      - name: Deploy profefe
        if: ${{ matrix.environment == 'profile' }}
        shell: bash
        run: |
          make k8s/metrics/profefe/deploy
          kubectl patch cronjob kprofefe -p '{"spec": {"schedule": "*/1 * * * *"}}'
          kubectl wait --for=condition=ready pod -l app=profefe --timeout=300s

      # TODO: correction & skip
      - name: Run E2E CRUD
        shell: bash
        run: |
          make hack/benchmark/assets/dataset/${{ env.DATASET }}
          if [[ "${{ matrix.environment }}" == "mirror" ]]; then
            export E2E_TARGET_NAMESPACE=vald-01
          fi
          kubectl get pods
          make e2e/v2 E2E_CONFIG=$(pwd)/tests/v2/e2e/assets/${{ matrix.scenario }}.yaml \
            E2E_PARALLELISM="4" \
            E2E_INSERT_COUNT="10000" \
            E2E_EXPECTED_INDEX="30000" \
            E2E_QPS="30" \
            E2E_SEARCH_COUNT="10" \
            E2E_UPDATE_COUNT="100" \
            E2E_BULK_SIZE="10"
      - uses: ./.github/actions/e2e-profile
        if: ${{ matrix.environment == 'profile' }}
        with:
          dispatch_user: ${{ secrets.DISPATCH_USER }}
          dispatch_token: ${{ secrets.DISPATCH_TOKEN }}

      - name: Debug
        if: ${{ always() }}
        run: |
          kubectl get nodes
          kubectl get pods
          kubectl describe pods
          kubectl describe pvc

  slack-notification:
    timeout-minutes: 30
    permissions:
      contents: read
    name: "Slack notification"
    if: startsWith( github.ref, 'refs/tags/')
    needs:
      - e2e
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: ./.github/actions/notify-slack
        with:
          author_name: "E2E deploy test"
          slack_notify_webhook_url: ${{ secrets.SLACK_NOTIFY_WEBHOOK_URL }}
