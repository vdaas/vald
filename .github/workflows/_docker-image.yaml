# !yamlfmt!:ignore

#
# Copyright (C) 2019-2025 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: "Build docker image"
on:
  workflow_call:
    inputs:
      target:
        type: string
        description: "Build target. e.g. `agent-ngt`"
        required: true
      platforms:
        type: string
        description: "If it is specified, specified platforms will be used."
        required: false
        default: ""
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref != 'refs/heads/main' && github.ref || github.sha }}-${{ github.event_name }}-${{ inputs.target }}
  cancel-in-progress: true
jobs:
  dump-contexts-to-log:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/dump-context
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.determine_platforms.outputs.result }}
    steps:
      - name: Get ref
        id: ref
        run: |
          if [ "${{ github.event.pull_request.head.sha }}" != "" ]; then
            echo ref=${{ github.event.pull_request.head.sha }} >> $GITHUB_OUTPUT
          else
            echo ref=${{ github.sha }} >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.ref.outputs.ref }}
      - name: Determine tag name
        id: determine_tag_name
        uses: ./.github/actions/determine-docker-image-tag
      - name: Determine platforms
        shell: bash
        id: determine_platforms
        run: |
          if [ "${TARGET_PLATFORMS}" = "" ]; then
            if [[ "$GITHUB_REF" =~ ^refs/heads/main$ ]] || [[ "$GITHUB_REF" =~ ^refs/heads/master$ ]] || [[ "$GITHUB_REF" =~ ^refs/heads/release.* ]] || [[ "${PRIMARY_TAG}" == "nightly" ]]; then
              platforms=`make docker/platforms`
            elif [ "${{ github.event_name }}" = "pull_request" ]; then
              platforms="linux/amd64"
            elif [ "${{ github.event_name }}" = "pull_request_target" ]; then
              platforms="linux/amd64"
            else
              platforms=`make docker/platforms`
            fi
          else
            platforms="${TARGET_PLATFORMS}"
          fi
          echo "PLATFORMS is determined: ${platforms}"
          json=$(jq -Rsc '[split(",") | .[] | gsub("\n"; "")]' <<< "$platforms")
          echo "result=$json" >> $GITHUB_OUTPUT
        env:
          TARGET_PLATFORMS: ${{ inputs.platforms }}
          PRIMARY_TAG: ${{ steps.determine_tag_name.outputs.PRIMARY_TAG }}
  build:
    runs-on: ubuntu-latest
    needs: setup-matrix
    permissions:
      packages: write
    strategy:
      max-parallel: 1
      matrix:
        platform: ${{ fromJson(needs.setup-matrix.outputs.platforms) }}
    if: >-
      ${{
        (github.event_name == 'pull_request' &&
         github.event.pull_request.head.repo.fork == false) ||
        (github.event.pull_request.head.repo.fork == true &&
         github.event_name == 'pull_request_target' &&
         (
           (github.event.action == 'labeled' && github.event.label.name == 'ci/approved') ||
           contains(github.event.pull_request.labels.*.name, 'ci/approved')
         )
        ) ||
        (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
        (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/v')) ||
        startsWith(github.ref, 'refs/tags/') ||
        (github.event_name == 'schedule')
      }}
    steps:
      - name: Get ref
        id: ref
        run: |
          if [ "${{ github.event.pull_request.head.sha }}" != "" ]; then
            echo ref=${{ github.event.pull_request.head.sha }} >> $GITHUB_OUTPUT
          else
            echo ref=${{ github.sha }} >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.ref.outputs.ref }}
      - name: Set Git config
        run: |
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.PACKAGE_USER }}
          password: ${{ secrets.PACKAGE_TOKEN }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: ghcr.io/vdaas/vald/vald-binfmt:nightly
          platforms: ${{ matrix.platform }}
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          platforms: ${{ matrix.platform }}
          driver-opts: |
            image=ghcr.io/vdaas/vald/vald-buildkit:nightly
            network=host
          buildkitd-flags: "--debug --oci-worker-gc=false --oci-worker-snapshotter=stargz"
      - name: Build and Publish
        id: build_and_publish
        uses: ./.github/actions/docker-build
        with:
          target: ${{ inputs.target }}
          platform: ${{ matrix.platform }}
          builder: ${{ steps.buildx.outputs.name }}
      - name: Scan the Docker image
        if: startsWith(github.ref, 'refs/tags/')
        uses: ./.github/actions/scan-docker-image
        with:
          image_ref: "${{ steps.build_and_publish.outputs.IMAGE_NAME }}:${{ steps.build_and_publish.outputs.PRIMARY_TAG }}-${{ contains(matrix.platform, 'arm64') && 'arm64' || 'amd64' }}"
      - name: Unify multiple platforms
        run: |
          alter_org=`make docker/name/org/alter`
          alter_image_name=`make ORG="${alter_org}" docker/name/${{ inputs.target }}`
          # Append images to the unified tag, create a new one if not exists
          docker buildx imagetools create --append \
            --tag "${{ steps.build_and_publish.outputs.IMAGE_NAME }}:${{ steps.build_and_publish.outputs.PRIMARY_TAG }}" \
            "${{ steps.build_and_publish.outputs.IMAGE_NAME }}:${{ steps.build_and_publish.outputs.PRIMARY_TAG }}-${{ contains(matrix.platform, 'arm64') && 'arm64' || 'amd64' }}" && \
          docker buildx imagetools create --append \
            --tag "$alter_image_name:${{ steps.build_and_publish.outputs.PRIMARY_TAG }}" \
            "$alter_image_name:${{ steps.build_and_publish.outputs.PRIMARY_TAG }}-${{ contains(matrix.platform, 'arm64') && 'arm64' || 'amd64' }}" || \
          docker buildx imagetools create \
            --tag "${{ steps.build_and_publish.outputs.IMAGE_NAME }}:${{ steps.build_and_publish.outputs.PRIMARY_TAG }}" \
            "${{ steps.build_and_publish.outputs.IMAGE_NAME }}:${{ steps.build_and_publish.outputs.PRIMARY_TAG }}-${{ contains(matrix.platform, 'arm64') && 'arm64' || 'amd64' }}" && \
          docker buildx imagetools create \
            --tag "$alter_image_name:${{ steps.build_and_publish.outputs.PRIMARY_TAG }}" \
            "$alter_image_name:${{ steps.build_and_publish.outputs.PRIMARY_TAG }}-${{ contains(matrix.platform, 'arm64') && 'arm64' || 'amd64' }}"

  slack:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/notify-slack
        with:
          author_name: ${{ inputs.target }} image build
          slack_notify_webhook_url: ${{ secrets.SLACK_NOTIFY_WEBHOOK_URL }}
