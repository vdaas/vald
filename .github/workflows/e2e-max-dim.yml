#
# Copyright (C) 2019-2023 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: "Run E2E Max Dimension test"
on:
  push:
    tags:
      - "*.*.*"
      - "v*.*.*"
      - "*.*.*-*"
      - "v*.*.*-*"
  pull_request:
    types:
      - "labeled"

jobs:
  e2e-max-dimension-insert:
    name: "E2E test (Max Dimension Insert: skip strict exist check)"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: startsWith( github.ref, 'refs/tags/') || github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-max-dim'
    steps:
      - uses: actions/checkout@v3
      - name: set git config
        run: |
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - name: Wait for Docker images
        if: startsWith( github.ref, 'refs/tags/')
        id: wait_for_docker_images
        uses: ./.github/actions/wait-for-docker-image
      - name: Get PR number
        id: get_pr_number
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        run: |
          pr_num=`cat $GITHUB_EVENT_PATH | jq -r ".number"`
          echo "PR_NUM=${pr_num}" >> $GITHUB_OUTPUT
      - name: Specify container versions
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        id: specify_container_versions
        uses: ./.github/actions/detect-docker-image-tags
        with:
          tag_name: pr-${{ steps.get_pr_number.outputs.PR_NUM }}
      - name: Fetch Helm version
        run: |
          HELM_VERSION=`make version/helm`
          echo "helm=${HELM_VERSION}" >> $GITHUB_OUTPUT
        id: version
      - uses: rinx/setup-k3d@v0.0.4
        with:
          version: latest
          name: vald
          agents: 1
      - name: check k3d
        run: |
          kubectl cluster-info
      - uses: azure/setup-helm@v3
        with:
          version: ${{ steps.version.outputs.helm }}
      - name: Helm version
        run: |
          helm version
      - name: deploy Vald
        id: deploy_vald
        uses: ./.github/actions/e2e-deploy-vald
        with:
          helm_extra_options: ${{ steps.specify_container_versions.outputs.HELM_EXTRA_OPTIONS }}
          values: .github/helm/values/values-max-dim.yaml
          wait_for_selector: app=vald-lb-gateway
      - name: Fetch golang version
        run: |
          GO_VERSION=`make version/go`
          echo "version=${GO_VERSION}" >> $GITHUB_OUTPUT
        id: golang_version
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.golang_version.outputs.version }}
      - name: run E2E MaxDimension
        run: |
          go version
          go get github.com/vdaas/vald-client-go/v1/payload
          go get github.com/vdaas/vald-client-go/v1/vald
          BIT=18
          RELEASE=`helm list | grep vald | awk '{print $1}'`
          while [ $BIT -ne 32 ]; do
            echo "Start: Bit=${BIT}"
            FILE="tmp.log"
            touch ${FILE}
            FILEPATH=`readlink -f ${FILE}`
            DIM=$((1<<$BIT))
            if [ $BIT = "32" ]; then
              DIM=$(($DIM-1))
            fi
            helm upgrade ${RELEASE} charts/vald \
              --values ${VALUES} \
              --set defaults.image.tag=nightly \
              --set agent.ngt.dimension=${DIM}
            sleep 3
            kubectl rollout restart statefulset vald-agent-ngt
            sleep 30
            kubectl wait --for=condition=Ready pod -l ${WAIT_FOR_SELECTOR} --timeout=${WAIT_FOR_TIMEOUT}
            POD_NAME=`kubectl get pods | grep vald-lb-gateway | awk '{print $1}'`
            go test \
              -race \
              -v tests/e2e/performance/max_vector_dim_test.go \
              -tags "e2e" \
              -file ${FILEPATH} \
              -timeout 30m \
              -bit=${BIT} \
              -host=localhost \
              -port=8081 \
              -portforward \
              -portforward-pod-name=${POD_NAME} \
              -kubeconfig=${KUBECONFIG} \
              -namespace=default
            CODE=`sed -n 1P ${FILEPATH}`
            if [ ${CODE} = "ResourceExhausted" ]; then
              echo "Finish: Bit=${BIT} with ${CODE}"
              BIT=$(($BIT-1))
              rm ${FILEPATH}
              break;
            fi
            if [ ${CODE} != "OK" ]; then
              echo "Finish: Bit=${BIT} with Error: ${CODE}"
              rm ${FILEPATH}
              break;
            fi
            echo "Finish: Bit=${BIT}"
            BIT=$(($BIT+1))
            rm ${FILEPATH}
          done
          echo "MAX_BIT=${BIT}" >> $GITHUB_OUTPUT
          echo "MAX_BIT=${BIT}"
        env:
          WAIT_FOR_SELECTOR: app=vald-agent-ngt
          WAIT_FOR_TIMEOUT: 29m
          VALUES: .github/helm/values/values-max-dim.yaml
        timeout-minutes: 60
  slack-notification:
    name: "Slack notification"
    needs:
      - e2e-max-dimension-insert
    runs-on: ubuntu-latest
    if: startsWith( github.ref, 'refs/tags/')
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: 8398a7/action-slack@v3
        with:
          author_name: "E2E max dim test"
          status: ${{ env.WORKFLOW_CONCLUSION }}
          only_mention_fail: channel
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_WEBHOOK_URL }}
