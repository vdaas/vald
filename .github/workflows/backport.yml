#
# Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: "Run backport PR"
on:
  pull_request:
    types:
      - "closed"
env:
  TARGET_LABEL_NAME_PREFIX: "actions/backport/"
  BACKPORT_BRANCH_NAME_PREFIX: "backport"
jobs:
  dump-contexts-to-log:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/dump-context
  create:
    runs-on: ubuntu-latest
    needs: [dump-contexts-to-log]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.DISPATCH_TOKEN }}
      - name: Set Git config
        run: |
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Get PR title and body
        id: pr_info
        run: |
          echo "PR_TITLE=$(jq --raw-output .pull_request.title $GITHUB_EVENT_PATH)" >> $GITHUB_ENV
          echo "PR_BODY=$(jq --raw-output .pull_request.body $GITHUB_EVENT_PATH)" >> $GITHUB_ENV
      - name: Create PR
        if: ${{ github.event.pull_request.labels.*.name == '${TARGET_LABEL_NAME_PREFIX}*' }}
        env:
          PR_TITLE: ${{ steps.pr_info.outputs.PR_TITEL }}
          PR_BODY: ${{ steps.pr_info.outputs.PR_BODY }}
          GITHUB_USER: ${{ secrets.DISPATCH_USER }}
          GITHUB_TOKEN: ${{ secrets.DISPATCH_TOKEN }}
        run: |
          LABEL_NAMES=`echo "${{ github.event.pull_request.labels.*.name }}" | jq -r '[.[] | select(startswith("actions/backport/"))] | join(" ")'`
          for LABEL_NAME in ${LABEL_NAMES}; do
              BRANCH_NAME=`echo "${LABEL_NAME}" | sed -e "s:^${TARGET_LABEL_NAME_PREFIX}::"`           # e.g) release/vx.x, main
              BACKPORT_BRANCH_NAME="${BACKPORT_BRANCH_NAME_PREFIX}/${BRANCH_NAME}/${GITHUB_HEAD_REF}"  # e.g) backport/release/vx.x/{current branch name}

              echo "BRANCH_NAME=${BRANCH_NAME}"
              echo "BACKPORT_BRANCH_NAME=${BACKPORT_BRANCH_NAME}"
              echo "SHA=${GITHUB_SHA}"

              git checkout ${BRANCH_NAME}
              git checkout -b ${BACKPORT_BRANCH_NAME}

              # Force cherry-pick. The conflicts will be modified within the backport PR.
              git cherry-pick $GITHUB_SHA || (git add -A && git cherry-pick --continue --no-edit)
              git push origin ${BACKPORT_BRANCH_NAME}

              gh pr create --base ${BRANCH_NAME} \
                           --title "Backport to ${BRANCH_NAME} for ${PR_TITLE}" \
                           --body "${PR_BODY}"
          done
