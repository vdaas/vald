#
# Copyright (C) 2019-2023 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: Run release
on:
  push:
    branches:
      - "release/v*.*"
      - "!release/v*.*.*"

jobs:
  dump-contexts-to-log:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/dump-context

  detect-ci-container:
    uses: ./.github/workflows/_detect-ci-container.yml
    secrets: inherit

  semver-auto:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_BRANCH_NAME_PREFIX: ${{ steps.set_context.outputs.RELEASE_BRANCH_NAME }}
      RELEASE_TAG: ${{ steps.upgrade_semver.outputs.RELEASE_TAG }}
      RELEASE: ${{ steps.upgrade_semver.outputs.RELEASE }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Github context
        id: set_context
        run: |
          RELEASE_BRANCH_NAME_PREFIX=`echo '${{ github.ref }}' | sed -e 's:^refs/heads/release/::'`
          BRANCH_LATEST_TAG=`git tag | grep ${RELEASE_BRANCH_NAME_PREFIX} | tail -n 1`
          RELEASE_KIND=`echo "${{ github.event.head_commit.message }}" | sed -n -E 's:^\[(major|minor|patch)\].*:\1:p'`

          echo "RELEASE_BRANCH_NAME_PREFIX=${RELEASE_BRANCH_NAME_PREFIX}" >> $GITHUB_OUTPUT # e.g) vx.x
          echo "BRANCH_LATEST_TAG=${BRANCH_LATEST_TAG}"                   >> $GITHUB_OUTPUT # e.g) vx.x.x or empty
          echo "RELEASE_KIND=${RELEASE_KIND}"                             >> $GITHUB_OUTPUT # e.g) major or minor or patch or empty

          echo "${RELEASE_BRANCH_NAME_PREFIX}"
          echo "${BRANCH_LATEST_TAG}"
          echo "${RELEASE_KIND}"

      - name: Upgrade semver
        id: upgrade_semver
        if: ${{ steps.set_context.outputs.RELEASE_KIND != '' }}
        env:
          RELEASE_BRANCH_NAME_PREFIX: ${{ steps.set_context.outputs.RELEASE_BRANCH_NAME_PREFIX }}
          BRANCH_LATEST_TAG: ${{ steps.set_context.outputs.BRANCH_LATEST_TAG }}
          RELEASE_KIND: ${{ steps.set_context.outputs.RELEASE_KIND }}
        run: |
          if [ -z "${BRANCH_LATEST_TAG}" ]; then
            case ${RELEASE_KIND} in
            major | minor) RELEASE_TAG="${RELEASE_BRANCH_NAME_PREFIX}.0"; ;;
            *) echo "not supported semver kind"; exit 1; ;;
            esac
          else
            IFS=. read -r version minor patch <<< "${BRANCH_LATEST_TAG}"

            case ${RELEASE_KIND} in
            patch) RELEASE_TAG="$version.$minor.$((patch+1))"; ;;
            *) echo "not supported semver kind"; exit 1; ;;
            esac
          fi

          if [ `git tag | grep "${RELEASE_TAG}"` ] || [ `cat versions/VALD_VERSION` = "${RELEASE_TAG}" ]; then
            echo "release already exists: ${RELEASE_TAG}"
            exit 1
          fi

          echo "RELEASE=true"             >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT # e.g) vx.x.x

          echo "${RELEASE_TAG}"

  release:
    needs:
      - detect-ci-container
      - semver-auto
    runs-on: ubuntu-latest
    if: ${{ needs.semver-auto.outputs.RELEASE == 'true' }}
    container:
      image: ghcr.io/vdaas/vald/vald-ci-container:${{ needs.detect-ci-container.outputs.TAG_NAME }}
    env:
      RELEASE_BRANCH_NAME: release/${{ needs.semver-auto.outputs.RELEASE_BRANCH_NAME_PREFIX }}
      RELEASE_TAG: ${{ needs.semver-auto.outputs.RELEASE_TAG }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Git config
        run: |
          git config --global --add safe.directory ${GITHUB_WORKSPACE}

      - name: Update for new release
        id: update_for_new_release
        run: |
          LAST_COMMIT_MESSAGE=`git log --pretty=format:%s -1`
          PR_NUM=`echo "${LAST_COMMIT_MESSAGE}" | grep -o "#[[:digit:]]\+" | sed -e 's/#//' | head -1`

          PREVIOUS_VERSION=`cat versions/VALD_VERSION`
          echo "${RELEASE_TAG}" > versions/VALD_VERSION

          sed -i -e "s/^version: .*$/version: ${RELEASE_TAG}/" charts/vald/Chart.yaml
          sed -i -r "s/^(\s*)tag\s*:\s*v[0-9]+\.[0-9]+\.[0-9]+\s*$/\1tag: ${RELEASE_TAG}/" charts/vald/values.yaml
          sed -i -e "s/^version: .*$/version: ${RELEASE_TAG}/" charts/vald-helm-operator/Chart.yaml
          sed -i -r "s/^(\s*)tag\s*:\s*v[0-9]+\.[0-9]+\.[0-9]+\s*$/\1tag: ${RELEASE_TAG}/" charts/vald-helm-operator/values.yaml

          make helm/docs/vald
          make helm/docs/vald-helm-operator

          make helm/schema/vald
          make helm/schema/vald-helm-operator

          BODY=""
          if [ ! -z "${PR_NUM}" ]; then
            BODY=`curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${PR_NUM}" | jq -r '.body'`
          fi

          if [ -z "$BODY" ]; then
            BODY=`git log --pretty=format:'- %s' ${PREVIOUS_VERSION}..${RELEASE_BRANCH_NAME} | grep "#[[:digit:]]\+" | sed -e "s/\[\(patch\|minor\|major\)\] *//g" | sed -e "s%#\([[:digit:]]\+\)%[&](https://github.com/vdaas/vald/pull/\1)%"`
          fi

          CHANGELOG=`make changelog/next/print BODY="$BODY"`
          make changelog/update BODY="$BODY"

          git add \
            versions/VALD_VERSION \
            charts/vald/Chart.yaml \
            charts/vald/values.yaml \
            charts/vald/values.schema.json \
            charts/vald/README.md \
            charts/vald-helm-operator/Chart.yaml \
            charts/vald-helm-operator/values.yaml \
            charts/vald-helm-operator/values.schema.json \
            charts/vald-helm-operator/README.md \
            CHANGELOG.md
          git commit -S --signoff -m ":bookmark: :robot: Release ${RELEASE_TAG}"

          git tag ${RELEASE_TAG}

          git remote set-url origin "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"

          git push origin ${RELEASE_BRANCH_NAME}
          git push origin ${RELEASE_TAG}

          echo "VERSION=${RELEASE_TAG}" >> $GITHUB_OUTPUT
        env:
          GITHUB_USER: ${{ secrets.DISPATCH_USER }}
          GITHUB_TOKEN: ${{ secrets.DISPATCH_TOKEN }}

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DISPATCH_TOKEN }}
        with:
          tag_name: ${{ steps.update_for_new_release.outputs.VERSION }}
          name: Release ${{ steps.update_for_new_release.outputs.VERSION }}
          body: |
            See [CHANGELOG.md](https://github.com/vdaas/vald/blob/${{ steps.update_for_new_release.outputs.VERSION }}/CHANGELOG.md) for details.
          draft: false
          prerelease: false

      - name: Add the version to goproxy
        run: |
          curl "https://proxy.golang.org/github.com/vdaas/vald/@v/${{ steps.update_for_new_release.outputs.VERSION }}.info"
