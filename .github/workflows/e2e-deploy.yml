#
# Copyright (C) 2019-2021 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: "Run e2e deploy test"
on:
  push:
    tags:
      - "*.*.*"
      - "v*.*.*"
      - "*.*.*-*"
      - "v*.*.*-*"
  pull_request:
    paths:
      - ".github/workflows/e2e-deploy.yml"

jobs:
  e2e-deploy:
    name: e2e deploy test
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v2
      - name: wait for dockers
        if: startsWith( github.ref, 'refs/tags/')
        run: |
          tag=$(cat versions/VALD_VERSION)
          for image in \
            vdaas/vald-agent-ngt \
            vdaas/vald-discoverer-k8s \
            vdaas/vald-manager-compressor \
            vdaas/vald-meta-redis \
            vdaas/vald-manager-backup-mysql \
            vdaas/vald-gateway \
            vdaas/vald-manager-index
          do
            echo "searching ${image}:${tag}"
            until curl -s "https://registry.hub.docker.com/v2/repositories/${image}/tags" | jq '.results[].name' | grep "${tag}"; do
              echo "waiting for ${image}:${tag} to be uploaded..."
              sleep 2
            done
          done
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev
      - name: Fetch Helm version
        run: |
          HELM_VERSION=`make version/helm`
          echo "::set-output name=helm::${HELM_VERSION}"
        id: version
      - uses: rinx/setup-k3d@v0.0.1
        with:
          version: latest
          name: vald
      - name: check k3d
        run: |
          kubectl cluster-info
      - uses: azure/setup-helm@v1
        with:
          version: ${{ steps.version.outputs.helm }}
      - name: Helm version
        run: |
          helm version
      - name: deploy vald
        run: |
          sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld
          make k8s/external/mysql/deploy
          make k8s/external/redis/deploy
          jq_query='.items[] | select( ([ .status.conditions[] | select( .type == "Ready" and .status == "True" ) ] | length ) == 1) | .metadata.namespace + "/" + .metadata.name'
          until [ $(kubectl get pod -o json | jq -r "$jq_query" | wc -l) -ge 2 ]
          do
            echo "waiting for databases to be ready..."
            kubectl get pods
            sleep 2
          done
          helm repo add vald https://vald.vdaas.org/charts
          tag=$(cat versions/VALD_VERSION)
          helm install \
            --values charts/vald/values-ci.yaml \
            --set defaults.image.tag=${tag} \
            --generate-name vald/vald
          until [ $(kubectl get pod -o json | jq -r "$jq_query" | wc -l) -ge 17 ]
          do
            echo "waiting for Vald to be ready..."
            kubectl get pods
            sleep 2
          done
          kubectl get pods
      - name: run E2E CRUD
        run: |
          make hack/benchmark/assets/dataset/${DATASET}
          podname=`kubectl get pods --selector=app=vald-gateway | tail -1 | awk '{print $1}'`
          go test \
            -v tests/e2e/crud_test.go \
            -tags "e2e" \
            -timeout 15m \
            -host=localhost \
            -port=8081 \
            -dataset=`pwd`/hack/benchmark/assets/dataset/${DATASET} \
            -insert-num=10000 \
            -search-num=10000 \
            -search-by-id-num=100 \
            -get-object-num=100 \
            -update-num=100 \
            -remove-num=100 \
            -wait-after-insert=2m \
            -portforward \
            -portforward-ns=default \
            -portforward-pod-name=${podname} \
            -portforward-pod-port=8081 \
            -kubeconfig=${KUBECONFIG}
        env:
          DATASET: fashion-mnist-784-euclidean.hdf5
  slack:
    name: Slack notification
    needs: e2e-deploy
    runs-on: ubuntu-latest
    if: startsWith( github.ref, 'refs/tags/')
    steps:
      - uses: technote-space/workflow-conclusion-action@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: 8398a7/action-slack@v2
        with:
          author_name: e2e-deploy test
          status: ${{ env.WORKFLOW_CONCLUSION }}
          only_mention_fail: channel
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_WEBHOOK_URL }}
