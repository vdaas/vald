#
# Copyright (C) 2019-2021 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: "Run E2E deploy and integration test"
on:
  push:
    tags:
      - "*.*.*"
      - "v*.*.*"
      - "*.*.*-*"
      - "v*.*.*-*"
  pull_request:
    types:
      - "labeled"

jobs:
  e2e-deploy-redis-mysql:
    name: "E2E deploy test (Redis, MySQL)"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: startsWith( github.ref, 'refs/tags/') || github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
    steps:
      - uses: actions/checkout@v2
      - name: wait for dockers
        if: startsWith( github.ref, 'refs/tags/')
        run: |
          tag=$(cat versions/VALD_VERSION)
          for image in \
            vdaas/vald-agent-ngt \
            vdaas/vald-discoverer-k8s \
            vdaas/vald-manager-compressor \
            vdaas/vald-meta-redis \
            vdaas/vald-manager-backup-mysql \
            vdaas/vald-backup-gateway \
            vdaas/vald-lb-gateway \
            vdaas/vald-meta-gateway \
            vdaas/vald-manager-index
          do
            echo "searching ${image}:${tag}"
            until curl -s "https://registry.hub.docker.com/v2/repositories/${image}/tags/${tag}" | jq '.name' | grep -v "null"; do
              echo "waiting for ${image}:${tag} to be uploaded..."
              sleep 2
            done
          done
      - name: Specify container versions
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        run: |
          pr_num=`cat $GITHUB_EVENT_PATH | jq -r ".number"`

          declare -A images=(
            ["vdaas/vald-agent-ngt"]="agent.image.tag"
            ["vdaas/vald-discoverer-k8s"]="discoverer.image.tag"
            ["vdaas/vald-manager-compressor"]="manager.compressor.image.tag"
            ["vdaas/vald-meta-redis"]="meta.image.tag"
            ["vdaas/vald-manager-backup-mysql"]="manager.backup.image.tag"
            ["vdaas/vald-backup-gateway"]="gateway.backup.image.tag"
            ["vdaas/vald-lb-gateway"]="gateway.lb.image.tag"
            ["vdaas/vald-meta-gateway"]="gateway.meta.image.tag"
            ["vdaas/vald-manager-index"]="manager.index.image.tag"
          )

          for image in "${!images[@]}"
          do
            echo "check for ${image}"

            if curl -s "https://registry.hub.docker.com/v2/repositories/${image}/tags/pr-${pr_num}" | jq '.name' | grep -v "null"; then
              echo "${image}:pr-${pr_num} exists. adding a helm option '--set ${images[${image}]}=pr-${pr_num}'."
              export HELM_EXTRA_OPTIONS="${HELM_EXTRA_OPTIONS} --set ${images[${image}]}=pr-${pr_num}"
            fi
          done

          echo "HELM_EXTRA_OPTIONS=${HELM_EXTRA_OPTIONS}"
          echo "HELM_EXTRA_OPTIONS=${HELM_EXTRA_OPTIONS}" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev
      - name: Fetch Helm version
        run: |
          HELM_VERSION=`make version/helm`
          echo "::set-output name=helm::${HELM_VERSION}"
        id: version
      - uses: rinx/setup-k3d@v0.0.2
        with:
          version: latest
          name: vald
          agents: 3
      - name: check k3d
        run: |
          kubectl cluster-info
      - uses: azure/setup-helm@v1
        with:
          version: ${{ steps.version.outputs.helm }}
      - name: Helm version
        run: |
          helm version
      - name: deploy vald
        run: |
          sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld

          make K8S_SLEEP_DURATION_FOR_WAIT_COMMAND=10 k8s/external/mysql/deploy
          make K8S_SLEEP_DURATION_FOR_WAIT_COMMAND=10 k8s/external/redis/deploy

          helm install \
            --values .github/helm/values/values-redis-mysql.yaml \
            --set defaults.image.tag=nightly \
            ${HELM_EXTRA_OPTIONS} \
            --generate-name charts/vald

          sleep 3

          kubectl wait --for=condition=ready pod -l app=vald-meta-gateway --timeout=600s

          kubectl get pods
      - name: run E2E CRUD
        run: |
          make hack/benchmark/assets/dataset/${DATASET}
          podname=`kubectl get pods --selector=app=vald-meta-gateway | tail -1 | awk '{print $1}'`
          go test \
            -v tests/e2e/crud/crud_test.go \
            -tags "e2e" \
            -timeout 30m \
            -run "TestE2EStandardCRUD" \
            -host=localhost \
            -port=8081 \
            -dataset=`pwd`/hack/benchmark/assets/dataset/${DATASET} \
            -insert-num=100 \
            -search-num=100 \
            -search-by-id-num=10 \
            -get-object-num=5 \
            -update-num=2 \
            -remove-num=2 \
            -wait-after-insert=10m \
            -portforward \
            -portforward-pod-name=${podname} \
            -portforward-pod-port=8081 \
            -kubeconfig=${KUBECONFIG} \
            -namespace=default
        env:
          DATASET: fashion-mnist-784-euclidean.hdf5
  e2e-deploy-cassandra:
    name: "E2E deploy test (Cassandra)"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: startsWith( github.ref, 'refs/tags/') || github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
    steps:
      - uses: actions/checkout@v2
      - name: wait for dockers
        if: startsWith( github.ref, 'refs/tags/')
        run: |
          tag=$(cat versions/VALD_VERSION)
          for image in \
            vdaas/vald-agent-ngt \
            vdaas/vald-discoverer-k8s \
            vdaas/vald-manager-compressor \
            vdaas/vald-meta-cassandra \
            vdaas/vald-manager-backup-cassandra \
            vdaas/vald-backup-gateway \
            vdaas/vald-lb-gateway \
            vdaas/vald-meta-gateway \
            vdaas/vald-manager-index
          do
            echo "searching ${image}:${tag}"
            until curl -s "https://registry.hub.docker.com/v2/repositories/${image}/tags/${tag}" | jq '.name' | grep -v "null"; do
              echo "waiting for ${image}:${tag} to be uploaded..."
              sleep 2
            done
          done
      - name: Specify container versions
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        run: |
          pr_num=`cat $GITHUB_EVENT_PATH | jq -r ".number"`

          declare -A images=(
            ["vdaas/vald-agent-ngt"]="agent.image.tag"
            ["vdaas/vald-discoverer-k8s"]="discoverer.image.tag"
            ["vdaas/vald-manager-compressor"]="manager.compressor.image.tag"
            ["vdaas/vald-meta-cassandra"]="meta.image.tag"
            ["vdaas/vald-manager-backup-cassandra"]="manager.backup.image.tag"
            ["vdaas/vald-backup-gateway"]="gateway.backup.image.tag"
            ["vdaas/vald-lb-gateway"]="gateway.lb.image.tag"
            ["vdaas/vald-meta-gateway"]="gateway.meta.image.tag"
            ["vdaas/vald-manager-index"]="manager.index.image.tag"
          )

          for image in "${!images[@]}"
          do
            echo "check for ${image}"

            if curl -s "https://registry.hub.docker.com/v2/repositories/${image}/tags/pr-${pr_num}" | jq '.name' | grep -v "null"; then
              echo "${image}:pr-${pr_num} exists. adding a helm option '--set ${images[${image}]}=pr-${pr_num}'."
              export HELM_EXTRA_OPTIONS="${HELM_EXTRA_OPTIONS} --set ${images[${image}]}=pr-${pr_num}"
            fi
          done

          echo "HELM_EXTRA_OPTIONS=${HELM_EXTRA_OPTIONS}"
          echo "HELM_EXTRA_OPTIONS=${HELM_EXTRA_OPTIONS}" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev
      - name: Fetch Helm version
        run: |
          HELM_VERSION=`make version/helm`
          echo "::set-output name=helm::${HELM_VERSION}"
        id: version
      - uses: rinx/setup-k3d@v0.0.2
        with:
          version: latest
          name: vald
          agents: 3
      - name: check k3d
        run: |
          kubectl cluster-info
      - uses: azure/setup-helm@v1
        with:
          version: ${{ steps.version.outputs.helm }}
      - name: Helm version
        run: |
          helm version
      - name: deploy vald
        run: |
          make K8S_SLEEP_DURATION_FOR_WAIT_COMMAND=10 k8s/external/scylla/deploy

          helm install \
            --values .github/helm/values/values-scylla.yaml \
            --set defaults.image.tag=nightly \
            ${HELM_EXTRA_OPTIONS} \
            --generate-name charts/vald

          sleep 3

          kubectl wait --for=condition=ready pod -l app=vald-meta-gateway --timeout=600s

          kubectl get pods
      - name: run E2E CRUD
        run: |
          make hack/benchmark/assets/dataset/${DATASET}
          podname=`kubectl get pods --selector=app=vald-meta-gateway | tail -1 | awk '{print $1}'`
          go test \
            -v tests/e2e/crud/crud_test.go \
            -tags "e2e" \
            -timeout 30m \
            -run "TestE2EStandardCRUD" \
            -host=localhost \
            -port=8081 \
            -dataset=`pwd`/hack/benchmark/assets/dataset/${DATASET} \
            -insert-num=1000 \
            -search-num=1000 \
            -search-by-id-num=10 \
            -get-object-num=10 \
            -update-num=3 \
            -remove-num=2 \
            -wait-after-insert=10m \
            -portforward \
            -portforward-pod-name=${podname} \
            -portforward-pod-port=8081 \
            -kubeconfig=${KUBECONFIG} \
            -namespace=default
        env:
          DATASET: fashion-mnist-784-euclidean.hdf5
  e2e-deploy-sidecar:
    name: "E2E deploy test (Agent & Sidecar)"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: startsWith( github.ref, 'refs/tags/') || github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
    steps:
      - uses: actions/checkout@v2
      - name: wait for dockers
        if: startsWith( github.ref, 'refs/tags/')
        run: |
          tag=$(cat versions/VALD_VERSION)
          for image in \
            vdaas/vald-agent-ngt \
            vdaas/vald-agent-sidecar
          do
            echo "searching ${image}:${tag}"
            until curl -s "https://registry.hub.docker.com/v2/repositories/${image}/tags/${tag}" | jq '.name' | grep -v "null"; do
              echo "waiting for ${image}:${tag} to be uploaded..."
              sleep 2
            done
          done
      - name: Specify container versions
        if: github.event.action == 'labeled' && github.event.label.name == 'actions/e2e-deploy'
        run: |
          pr_num=`cat $GITHUB_EVENT_PATH | jq -r ".number"`

          declare -A images=(
            ["vdaas/vald-agent-ngt"]="agent.image.tag"
            ["vdaas/vald-agent-sidecar"]="agent.sidecar.image.tag"
          )

          for image in "${!images[@]}"
          do
            echo "check for ${image}"

            if curl -s "https://registry.hub.docker.com/v2/repositories/${image}/tags/pr-${pr_num}" | jq '.name' | grep -v "null"; then
              echo "${image}:pr-${pr_num} exists. adding a helm option '--set ${images[${image}]}=pr-${pr_num}'."
              export HELM_EXTRA_OPTIONS="${HELM_EXTRA_OPTIONS} --set ${images[${image}]}=pr-${pr_num}"
            fi
          done

          echo "HELM_EXTRA_OPTIONS=${HELM_EXTRA_OPTIONS}"
          echo "HELM_EXTRA_OPTIONS=${HELM_EXTRA_OPTIONS}" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev
      - name: Fetch Helm version
        run: |
          HELM_VERSION=`make version/helm`
          echo "::set-output name=helm::${HELM_VERSION}"
        id: version
      - uses: rinx/setup-k3d@v0.0.2
        with:
          version: latest
          name: vald
          agents: 3
      - name: check k3d
        run: |
          kubectl cluster-info
      - uses: azure/setup-helm@v1
        with:
          version: ${{ steps.version.outputs.helm }}
      - name: Helm version
        run: |
          helm version
      - name: deploy vald
        run: |
          make K8S_SLEEP_DURATION_FOR_WAIT_COMMAND=10 k8s/external/minio/deploy

          helm install \
            --values .github/helm/values/values-agent-sidecar.yaml \
            --set defaults.image.tag=nightly \
            ${HELM_EXTRA_OPTIONS} \
            --generate-name charts/vald

          sleep 3

          kubectl wait --for=condition=ready pod -l app=vald-agent-ngt --timeout=600s

          kubectl get pods
      - name: run E2E Agent & Sidecar
        run: |
          make hack/benchmark/assets/dataset/${DATASET}
          podname=`kubectl get pods --selector=app=vald-agent-ngt | tail -1 | awk '{print $1}'`
          go test \
            -v tests/e2e/sidecar/sidecar_test.go \
            -tags "e2e" \
            -timeout 30m \
            -run "TestE2EForSidecar" \
            -host=localhost \
            -port=8081 \
            -dataset=`pwd`/hack/benchmark/assets/dataset/${DATASET} \
            -insert-num=60000 \
            -search-num=10000 \
            -portforward \
            -portforward-pod-name=${podname} \
            -portforward-pod-port=8081 \
            -kubeconfig=${KUBECONFIG} \
            -namespace=default
        env:
          DATASET: fashion-mnist-784-euclidean.hdf5
  slack-notification:
    name: "Slack notification"
    needs:
      - e2e-deploy-redis-mysql
      - e2e-deploy-cassandra
      - e2e-deploy-sidecar
    runs-on: ubuntu-latest
    if: startsWith( github.ref, 'refs/tags/')
    steps:
      - uses: technote-space/workflow-conclusion-action@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: 8398a7/action-slack@v2
        with:
          author_name: "E2E deploy test"
          status: ${{ env.WORKFLOW_CONCLUSION }}
          only_mention_fail: channel
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFY_WEBHOOK_URL }}
