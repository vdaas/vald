#
# Copyright (C) 2019-2024 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: "Determine Docker image tag"
description: "A action to determine Docker image tag"
outputs:
  TAGS:
    description: "docker image tag list"
    value: ${{ steps.determine_tag_name.outputs.TAGS }}
  PRIMARY_TAG:
    description: "highest priority docker image tag in tag list"
    value: ${{ steps.determine_tag_name.outputs.PRIMARY_TAG }}
runs:
  using: "composite"
  steps:
    - name: Dump Github context
      shell: bash
      run: |
        echo "GITHUB_REF $GITHUB_REF"
        echo "GITHUB_BASE_REF $GITHUB_BASE_REF"
        echo "GITHUB_EVENT_PATH $GITHUB_EVENT_PATH"
        echo "GITHUB_EVENT_NAME ${{ github.event_name }}"
        echo "GITHUB_EVENT_NUMBER  ${{ github.event.number }}"
    - name: Determine tag name
      shell: bash
      id: determine_tag_name
      run: |
        if [[ "$GITHUB_REF" =~ ^refs/tags/.* ]]; then
        # The following is the priority of tags:
        #   tag -> release/vx.x tag (release branch build tag) -> commit hash tag -> vx.x -> latest tag
        # When a tag is created, the image build for the tag may not be finished.
        # In that case, the CI container will use the tag for the release branch.
        # At the timing of the creation of the tag, the vx.x points to the previous version, so the priority is lowered.
        # (At the timing of the start of the image build for tag, vx.x and tag are equal.)
        tag=$(echo $GITHUB_REF | sed -e 's:^refs/tags/::') # e.g) v1.7.6
        tags="${tag}"

        release_branch_tag="release/${major_minor_tag}" # e.g) release/v1.7
        tags="${tags} ${release_branch_tag}"

        major_minor_tag="$(echo "${tag}" | sed -E 's/^v?([0-9]+\.[0-9]+).*$/v\1/')" # e.g) v.1.7
        tags="${tags} ${major_minor_tag}"

        commit_hash_tag=${GITHUB_SHA::8}
        tags="${tags} ${commit_hash_tag}"
        tags="${tags} latest"

        elif [[ "${{ github.event_name }}" = "pull_request" || "${{ github.event_name }}" = "pull_request_target" ]]; then
          # The following is the priority of tags:
          #   pr-xxx tag (PR build tag) -> release/vx.x tag (release branch tag) or nightly tag
          pr_num=$(cat $GITHUB_EVENT_PATH | jq -r ".number")
          tags="pr-${pr_num}"

          # For pull request to the release branch, use the release branch latest tag as the default tag (release/vx.x).
          # This is only set if the event that triggers the workflow execution is pull_request or pull_request_target.
          if [[ "$GITHUB_BASE_REF" =~ ^release/v([0-9]+)\.([0-9]+)$ ]]; then
            tags="${tags} $(echo "$GITHUB_BASE_REF")"
          else
            # Currently, it is assumed to be nightly.
            # However, further conditions will be added in the future if they cause inconvenience.
            tags="${tags} nightly"
          fi
        elif [ "$GITHUB_REF" = "refs/heads/main" ]; then
          # The following is the priority of tags:
          #   commit hash tag -> nightly tag
          commit_hash_tag=${GITHUB_SHA::8}
          tags="${commit_hash_tag}"
          tags="${tags} nightly"

        elif [[ "$GITHUB_REF" =~ ^refs/heads/release/v([0-9]+)\.([0-9]+)$ ]]; then
        # The following is the priority of tags:
        #   release/vx.x tag (release branch build tag) -> commit hash tag -> nightly tag
        release_branch_tag=$(echo $GITHUB_REF | sed -e 's:^refs/heads/::') # e.g) release/v1.7
        tags="${release_branch_tag}"

        commit_hash_tag=${GITHUB_SHA::8}
        tags="${tags} ${commit_hash_tag}"
        tags="${tags} nightly"
        else
          tags="unknown"
        fi
        primary_tag=$(echo ${tags} | awk '{print $1}')

        echo "Determined tags: ${tags}"
        echo "Primary tag: ${primary_tag}"

        echo "TAGS=${tags}"               >> $GITHUB_OUTPUT
        echo "PRIMARY_TAG=${primary_tag}" >> $GITHUB_OUTPUT
